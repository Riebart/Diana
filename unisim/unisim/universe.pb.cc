// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: universe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "universe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace universe {

void protobuf_ShutdownFile_universe_2eproto() {
  delete MessageWrapper::default_instance_;
  delete VectorMsg::default_instance_;
  delete HelloMsg::default_instance_;
  delete HelloMsg::_default_name_;
  delete PhysPropsMsg::default_instance_;
  delete PhysPropsMsg::_default_name_;
  delete GoodbyeMsg::default_instance_;
  delete GoodbyeMsg::_default_name_;
  delete CollisionMsg::default_instance_;
  delete CollisionMsg::_default_name_;
  delete SpawnMsg::default_instance_;
  delete SpawnMsg::_default_name_;
  delete VisProps::default_instance_;
  delete VisProps::_default_name_;
  delete VisDataEnable::default_instance_;
  delete VisDataEnable::_default_name_;
  delete VisData::default_instance_;
  delete VisData::_default_name_;
  delete VisMetaData::default_instance_;
  delete VisMetaData::_default_name_;
  delete VisMetaDataEnable::default_instance_;
  delete VisMetaDataEnable::_default_name_;
  delete BeamMsg::default_instance_;
  delete BeamMsg::_default_name_;
  delete ScanResultMsg::default_instance_;
  delete ScanResultMsg::_default_name_;
  delete ScanQueryMsg::default_instance_;
  delete ScanQueryMsg::_default_name_;
  delete ScanRespMsg::default_instance_;
  delete ScanRespMsg::_default_name_;
  delete DirectoryMsg::default_instance_;
  delete DirectoryMsg::_default_name_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_universe_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_universe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MessageWrapper::default_instance_ = new MessageWrapper();
  VectorMsg::default_instance_ = new VectorMsg();
  HelloMsg::_default_name_ =
      new ::std::string("HELLO", 5);
  HelloMsg::default_instance_ = new HelloMsg();
  PhysPropsMsg::_default_name_ =
      new ::std::string("PHYSPROPS", 9);
  PhysPropsMsg::default_instance_ = new PhysPropsMsg();
  GoodbyeMsg::_default_name_ =
      new ::std::string("GOODBYE", 7);
  GoodbyeMsg::default_instance_ = new GoodbyeMsg();
  CollisionMsg::_default_name_ =
      new ::std::string("COLLISION", 9);
  CollisionMsg::default_instance_ = new CollisionMsg();
  SpawnMsg::_default_name_ =
      new ::std::string("SPAWN", 5);
  SpawnMsg::default_instance_ = new SpawnMsg();
  VisProps::_default_name_ =
      new ::std::string("VISPROPS", 8);
  VisProps::default_instance_ = new VisProps();
  VisDataEnable::_default_name_ =
      new ::std::string("VISDATAENABLE", 13);
  VisDataEnable::default_instance_ = new VisDataEnable();
  VisData::_default_name_ =
      new ::std::string("VISDATA", 7);
  VisData::default_instance_ = new VisData();
  VisMetaData::_default_name_ =
      new ::std::string("VISMETADATA", 11);
  VisMetaData::default_instance_ = new VisMetaData();
  VisMetaDataEnable::_default_name_ =
      new ::std::string("VISMETADATAENABLE", 17);
  VisMetaDataEnable::default_instance_ = new VisMetaDataEnable();
  BeamMsg::_default_name_ =
      new ::std::string("BEAM", 4);
  BeamMsg::default_instance_ = new BeamMsg();
  ScanResultMsg::_default_name_ =
      new ::std::string("SCANRESULT", 10);
  ScanResultMsg::default_instance_ = new ScanResultMsg();
  ScanQueryMsg::_default_name_ =
      new ::std::string("SCANQUERY", 9);
  ScanQueryMsg::default_instance_ = new ScanQueryMsg();
  ScanRespMsg::_default_name_ =
      new ::std::string("SCANRESP", 8);
  ScanRespMsg::default_instance_ = new ScanRespMsg();
  DirectoryMsg::_default_name_ =
      new ::std::string("DIRECTORY", 9);
  DirectoryMsg::default_instance_ = new DirectoryMsg();
  MessageWrapper::default_instance_->InitAsDefaultInstance();
  VectorMsg::default_instance_->InitAsDefaultInstance();
  HelloMsg::default_instance_->InitAsDefaultInstance();
  PhysPropsMsg::default_instance_->InitAsDefaultInstance();
  GoodbyeMsg::default_instance_->InitAsDefaultInstance();
  CollisionMsg::default_instance_->InitAsDefaultInstance();
  SpawnMsg::default_instance_->InitAsDefaultInstance();
  VisProps::default_instance_->InitAsDefaultInstance();
  VisDataEnable::default_instance_->InitAsDefaultInstance();
  VisData::default_instance_->InitAsDefaultInstance();
  VisMetaData::default_instance_->InitAsDefaultInstance();
  VisMetaDataEnable::default_instance_->InitAsDefaultInstance();
  BeamMsg::default_instance_->InitAsDefaultInstance();
  ScanResultMsg::default_instance_->InitAsDefaultInstance();
  ScanQueryMsg::default_instance_->InitAsDefaultInstance();
  ScanRespMsg::default_instance_->InitAsDefaultInstance();
  DirectoryMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_universe_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_universe_2eproto_once_);
void protobuf_AddDesc_universe_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_universe_2eproto_once_,
                 &protobuf_AddDesc_universe_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_universe_2eproto {
  StaticDescriptorInitializer_universe_2eproto() {
    protobuf_AddDesc_universe_2eproto();
  }
} static_descriptor_initializer_universe_2eproto_;
#endif

// ===================================================================

bool MessageWrapper_MessageType_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageWrapper_MessageType MessageWrapper::HELLO;
const MessageWrapper_MessageType MessageWrapper::GOODBYE;
const MessageWrapper_MessageType MessageWrapper::PHYSPROPS;
const MessageWrapper_MessageType MessageWrapper::COLLISION;
const MessageWrapper_MessageType MessageWrapper::SPAWN;
const MessageWrapper_MessageType MessageWrapper::BEAM;
const MessageWrapper_MessageType MessageWrapper::SCANRESULT;
const MessageWrapper_MessageType MessageWrapper::SCANQUERY;
const MessageWrapper_MessageType MessageWrapper::SCANRESP;
const MessageWrapper_MessageType MessageWrapper::DIRECTORY;
const MessageWrapper_MessageType MessageWrapper::VISPROPS;
const MessageWrapper_MessageType MessageWrapper::VISDATAENABLE;
const MessageWrapper_MessageType MessageWrapper::VISMETADATAENABLE;
const MessageWrapper_MessageType MessageWrapper::VISMETADATA;
const MessageWrapper_MessageType MessageWrapper::VISDATA;
const MessageWrapper_MessageType MessageWrapper::MessageType_MIN;
const MessageWrapper_MessageType MessageWrapper::MessageType_MAX;
const int MessageWrapper::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageWrapper::kMessageTypeFieldNumber;
const int MessageWrapper::kObjectIDFieldNumber;
const int MessageWrapper::kHelloMsgFieldNumber;
const int MessageWrapper::kGoodByeMsgFieldNumber;
const int MessageWrapper::kPhysPropsMsgFieldNumber;
const int MessageWrapper::kCollisionMsgFieldNumber;
const int MessageWrapper::kSpawnMsgFieldNumber;
const int MessageWrapper::kBeamMsgFieldNumber;
const int MessageWrapper::kScanResultMsgFieldNumber;
const int MessageWrapper::kScanQueryMsgFieldNumber;
const int MessageWrapper::kScanRespMsgFieldNumber;
const int MessageWrapper::kDirectoryMsgFieldNumber;
const int MessageWrapper::kVisPropsFieldNumber;
const int MessageWrapper::kVisDataEnableFieldNumber;
const int MessageWrapper::kVisMetaDataEnableFieldNumber;
const int MessageWrapper::kVisMetaDataFieldNumber;
const int MessageWrapper::kVisDataFieldNumber;
#endif  // !_MSC_VER

MessageWrapper::MessageWrapper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessageWrapper::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hellomsg_ = const_cast< ::universe::HelloMsg*>(
      ::universe::HelloMsg::internal_default_instance());
#else
  hellomsg_ = const_cast< ::universe::HelloMsg*>(&::universe::HelloMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  goodbyemsg_ = const_cast< ::universe::GoodbyeMsg*>(
      ::universe::GoodbyeMsg::internal_default_instance());
#else
  goodbyemsg_ = const_cast< ::universe::GoodbyeMsg*>(&::universe::GoodbyeMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  physpropsmsg_ = const_cast< ::universe::PhysPropsMsg*>(
      ::universe::PhysPropsMsg::internal_default_instance());
#else
  physpropsmsg_ = const_cast< ::universe::PhysPropsMsg*>(&::universe::PhysPropsMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  collisionmsg_ = const_cast< ::universe::CollisionMsg*>(
      ::universe::CollisionMsg::internal_default_instance());
#else
  collisionmsg_ = const_cast< ::universe::CollisionMsg*>(&::universe::CollisionMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  spawnmsg_ = const_cast< ::universe::SpawnMsg*>(
      ::universe::SpawnMsg::internal_default_instance());
#else
  spawnmsg_ = const_cast< ::universe::SpawnMsg*>(&::universe::SpawnMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  beammsg_ = const_cast< ::universe::BeamMsg*>(
      ::universe::BeamMsg::internal_default_instance());
#else
  beammsg_ = const_cast< ::universe::BeamMsg*>(&::universe::BeamMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scanresultmsg_ = const_cast< ::universe::ScanResultMsg*>(
      ::universe::ScanResultMsg::internal_default_instance());
#else
  scanresultmsg_ = const_cast< ::universe::ScanResultMsg*>(&::universe::ScanResultMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scanquerymsg_ = const_cast< ::universe::ScanQueryMsg*>(
      ::universe::ScanQueryMsg::internal_default_instance());
#else
  scanquerymsg_ = const_cast< ::universe::ScanQueryMsg*>(&::universe::ScanQueryMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scanrespmsg_ = const_cast< ::universe::ScanRespMsg*>(
      ::universe::ScanRespMsg::internal_default_instance());
#else
  scanrespmsg_ = const_cast< ::universe::ScanRespMsg*>(&::universe::ScanRespMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  directorymsg_ = const_cast< ::universe::DirectoryMsg*>(
      ::universe::DirectoryMsg::internal_default_instance());
#else
  directorymsg_ = const_cast< ::universe::DirectoryMsg*>(&::universe::DirectoryMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  visprops_ = const_cast< ::universe::VisProps*>(
      ::universe::VisProps::internal_default_instance());
#else
  visprops_ = const_cast< ::universe::VisProps*>(&::universe::VisProps::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  visdataenable_ = const_cast< ::universe::VisDataEnable*>(
      ::universe::VisDataEnable::internal_default_instance());
#else
  visdataenable_ = const_cast< ::universe::VisDataEnable*>(&::universe::VisDataEnable::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vismetadataenable_ = const_cast< ::universe::VisMetaDataEnable*>(
      ::universe::VisMetaDataEnable::internal_default_instance());
#else
  vismetadataenable_ = const_cast< ::universe::VisMetaDataEnable*>(&::universe::VisMetaDataEnable::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vismetadata_ = const_cast< ::universe::VisMetaData*>(
      ::universe::VisMetaData::internal_default_instance());
#else
  vismetadata_ = const_cast< ::universe::VisMetaData*>(&::universe::VisMetaData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  visdata_ = const_cast< ::universe::VisData*>(
      ::universe::VisData::internal_default_instance());
#else
  visdata_ = const_cast< ::universe::VisData*>(&::universe::VisData::default_instance());
#endif
}

MessageWrapper::MessageWrapper(const MessageWrapper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessageWrapper::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 3;
  objectid_ = GOOGLE_ULONGLONG(0);
  hellomsg_ = NULL;
  goodbyemsg_ = NULL;
  physpropsmsg_ = NULL;
  collisionmsg_ = NULL;
  spawnmsg_ = NULL;
  beammsg_ = NULL;
  scanresultmsg_ = NULL;
  scanquerymsg_ = NULL;
  scanrespmsg_ = NULL;
  directorymsg_ = NULL;
  visprops_ = NULL;
  visdataenable_ = NULL;
  vismetadataenable_ = NULL;
  vismetadata_ = NULL;
  visdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageWrapper::~MessageWrapper() {
  SharedDtor();
}

void MessageWrapper::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hellomsg_;
    delete goodbyemsg_;
    delete physpropsmsg_;
    delete collisionmsg_;
    delete spawnmsg_;
    delete beammsg_;
    delete scanresultmsg_;
    delete scanquerymsg_;
    delete scanrespmsg_;
    delete directorymsg_;
    delete visprops_;
    delete visdataenable_;
    delete vismetadataenable_;
    delete vismetadata_;
    delete visdata_;
  }
}

void MessageWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageWrapper& MessageWrapper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

MessageWrapper* MessageWrapper::default_instance_ = NULL;

MessageWrapper* MessageWrapper::New() const {
  return new MessageWrapper;
}

void MessageWrapper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 3;
    objectid_ = GOOGLE_ULONGLONG(0);
    if (has_hellomsg()) {
      if (hellomsg_ != NULL) hellomsg_->::universe::HelloMsg::Clear();
    }
    if (has_goodbyemsg()) {
      if (goodbyemsg_ != NULL) goodbyemsg_->::universe::GoodbyeMsg::Clear();
    }
    if (has_physpropsmsg()) {
      if (physpropsmsg_ != NULL) physpropsmsg_->::universe::PhysPropsMsg::Clear();
    }
    if (has_collisionmsg()) {
      if (collisionmsg_ != NULL) collisionmsg_->::universe::CollisionMsg::Clear();
    }
    if (has_spawnmsg()) {
      if (spawnmsg_ != NULL) spawnmsg_->::universe::SpawnMsg::Clear();
    }
    if (has_beammsg()) {
      if (beammsg_ != NULL) beammsg_->::universe::BeamMsg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scanresultmsg()) {
      if (scanresultmsg_ != NULL) scanresultmsg_->::universe::ScanResultMsg::Clear();
    }
    if (has_scanquerymsg()) {
      if (scanquerymsg_ != NULL) scanquerymsg_->::universe::ScanQueryMsg::Clear();
    }
    if (has_scanrespmsg()) {
      if (scanrespmsg_ != NULL) scanrespmsg_->::universe::ScanRespMsg::Clear();
    }
    if (has_directorymsg()) {
      if (directorymsg_ != NULL) directorymsg_->::universe::DirectoryMsg::Clear();
    }
    if (has_visprops()) {
      if (visprops_ != NULL) visprops_->::universe::VisProps::Clear();
    }
    if (has_visdataenable()) {
      if (visdataenable_ != NULL) visdataenable_->::universe::VisDataEnable::Clear();
    }
    if (has_vismetadataenable()) {
      if (vismetadataenable_ != NULL) vismetadataenable_->::universe::VisMetaDataEnable::Clear();
    }
    if (has_vismetadata()) {
      if (vismetadata_ != NULL) vismetadata_->::universe::VisMetaData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_visdata()) {
      if (visdata_ != NULL) visdata_->::universe::VisData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessageWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .universe.MessageWrapper.MessageType messageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::universe::MessageWrapper_MessageType_IsValid(value)) {
            set_messagetype(static_cast< ::universe::MessageWrapper_MessageType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectID;
        break;
      }

      // optional uint64 objectID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_helloMsg;
        break;
      }

      // optional .universe.HelloMsg helloMsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helloMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hellomsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_goodByeMsg;
        break;
      }

      // optional .universe.GoodbyeMsg goodByeMsg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodByeMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goodbyemsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_physPropsMsg;
        break;
      }

      // optional .universe.PhysPropsMsg physPropsMsg = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_physPropsMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physpropsmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_collisionMsg;
        break;
      }

      // optional .universe.CollisionMsg collisionMsg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collisionMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collisionmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_spawnMsg;
        break;
      }

      // optional .universe.SpawnMsg spawnMsg = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spawnMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawnmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_beamMsg;
        break;
      }

      // optional .universe.BeamMsg beamMsg = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beammsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_scanResultMsg;
        break;
      }

      // optional .universe.ScanResultMsg scanResultMsg = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanResultMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scanresultmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_scanQueryMsg;
        break;
      }

      // optional .universe.ScanQueryMsg scanQueryMsg = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanQueryMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scanquerymsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_scanRespMsg;
        break;
      }

      // optional .universe.ScanRespMsg scanRespMsg = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanRespMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scanrespmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_directoryMsg;
        break;
      }

      // optional .universe.DirectoryMsg directoryMsg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directoryMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directorymsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_visProps;
        break;
      }

      // optional .universe.VisProps visProps = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visProps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visprops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_visDataEnable;
        break;
      }

      // optional .universe.VisDataEnable visDataEnable = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visDataEnable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visdataenable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_visMetaDataEnable;
        break;
      }

      // optional .universe.VisMetaDataEnable visMetaDataEnable = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visMetaDataEnable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vismetadataenable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_visMetaData;
        break;
      }

      // optional .universe.VisMetaData visMetaData = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visMetaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vismetadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_visData;
        break;
      }

      // optional .universe.VisData visData = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .universe.MessageWrapper.MessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional uint64 objectID = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->objectid(), output);
  }

  // optional .universe.HelloMsg helloMsg = 3;
  if (has_hellomsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->hellomsg(), output);
  }

  // optional .universe.GoodbyeMsg goodByeMsg = 4;
  if (has_goodbyemsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->goodbyemsg(), output);
  }

  // optional .universe.PhysPropsMsg physPropsMsg = 10;
  if (has_physpropsmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->physpropsmsg(), output);
  }

  // optional .universe.CollisionMsg collisionMsg = 11;
  if (has_collisionmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->collisionmsg(), output);
  }

  // optional .universe.SpawnMsg spawnMsg = 12;
  if (has_spawnmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->spawnmsg(), output);
  }

  // optional .universe.BeamMsg beamMsg = 13;
  if (has_beammsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->beammsg(), output);
  }

  // optional .universe.ScanResultMsg scanResultMsg = 14;
  if (has_scanresultmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->scanresultmsg(), output);
  }

  // optional .universe.ScanQueryMsg scanQueryMsg = 15;
  if (has_scanquerymsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->scanquerymsg(), output);
  }

  // optional .universe.ScanRespMsg scanRespMsg = 16;
  if (has_scanrespmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->scanrespmsg(), output);
  }

  // optional .universe.DirectoryMsg directoryMsg = 17;
  if (has_directorymsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->directorymsg(), output);
  }

  // optional .universe.VisProps visProps = 100;
  if (has_visprops()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, this->visprops(), output);
  }

  // optional .universe.VisDataEnable visDataEnable = 101;
  if (has_visdataenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101, this->visdataenable(), output);
  }

  // optional .universe.VisMetaDataEnable visMetaDataEnable = 102;
  if (has_vismetadataenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      102, this->vismetadataenable(), output);
  }

  // optional .universe.VisMetaData visMetaData = 103;
  if (has_vismetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      103, this->vismetadata(), output);
  }

  // optional .universe.VisData visData = 104;
  if (has_visdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      104, this->visdata(), output);
  }

}

int MessageWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .universe.MessageWrapper.MessageType messageType = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

    // optional uint64 objectID = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objectid());
    }

    // optional .universe.HelloMsg helloMsg = 3;
    if (has_hellomsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hellomsg());
    }

    // optional .universe.GoodbyeMsg goodByeMsg = 4;
    if (has_goodbyemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goodbyemsg());
    }

    // optional .universe.PhysPropsMsg physPropsMsg = 10;
    if (has_physpropsmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physpropsmsg());
    }

    // optional .universe.CollisionMsg collisionMsg = 11;
    if (has_collisionmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collisionmsg());
    }

    // optional .universe.SpawnMsg spawnMsg = 12;
    if (has_spawnmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawnmsg());
    }

    // optional .universe.BeamMsg beamMsg = 13;
    if (has_beammsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beammsg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .universe.ScanResultMsg scanResultMsg = 14;
    if (has_scanresultmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scanresultmsg());
    }

    // optional .universe.ScanQueryMsg scanQueryMsg = 15;
    if (has_scanquerymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scanquerymsg());
    }

    // optional .universe.ScanRespMsg scanRespMsg = 16;
    if (has_scanrespmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scanrespmsg());
    }

    // optional .universe.DirectoryMsg directoryMsg = 17;
    if (has_directorymsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directorymsg());
    }

    // optional .universe.VisProps visProps = 100;
    if (has_visprops()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visprops());
    }

    // optional .universe.VisDataEnable visDataEnable = 101;
    if (has_visdataenable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visdataenable());
    }

    // optional .universe.VisMetaDataEnable visMetaDataEnable = 102;
    if (has_vismetadataenable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vismetadataenable());
    }

    // optional .universe.VisMetaData visMetaData = 103;
    if (has_vismetadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vismetadata());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .universe.VisData visData = 104;
    if (has_visdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visdata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageWrapper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageWrapper*>(&from));
}

void MessageWrapper::MergeFrom(const MessageWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_hellomsg()) {
      mutable_hellomsg()->::universe::HelloMsg::MergeFrom(from.hellomsg());
    }
    if (from.has_goodbyemsg()) {
      mutable_goodbyemsg()->::universe::GoodbyeMsg::MergeFrom(from.goodbyemsg());
    }
    if (from.has_physpropsmsg()) {
      mutable_physpropsmsg()->::universe::PhysPropsMsg::MergeFrom(from.physpropsmsg());
    }
    if (from.has_collisionmsg()) {
      mutable_collisionmsg()->::universe::CollisionMsg::MergeFrom(from.collisionmsg());
    }
    if (from.has_spawnmsg()) {
      mutable_spawnmsg()->::universe::SpawnMsg::MergeFrom(from.spawnmsg());
    }
    if (from.has_beammsg()) {
      mutable_beammsg()->::universe::BeamMsg::MergeFrom(from.beammsg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scanresultmsg()) {
      mutable_scanresultmsg()->::universe::ScanResultMsg::MergeFrom(from.scanresultmsg());
    }
    if (from.has_scanquerymsg()) {
      mutable_scanquerymsg()->::universe::ScanQueryMsg::MergeFrom(from.scanquerymsg());
    }
    if (from.has_scanrespmsg()) {
      mutable_scanrespmsg()->::universe::ScanRespMsg::MergeFrom(from.scanrespmsg());
    }
    if (from.has_directorymsg()) {
      mutable_directorymsg()->::universe::DirectoryMsg::MergeFrom(from.directorymsg());
    }
    if (from.has_visprops()) {
      mutable_visprops()->::universe::VisProps::MergeFrom(from.visprops());
    }
    if (from.has_visdataenable()) {
      mutable_visdataenable()->::universe::VisDataEnable::MergeFrom(from.visdataenable());
    }
    if (from.has_vismetadataenable()) {
      mutable_vismetadataenable()->::universe::VisMetaDataEnable::MergeFrom(from.vismetadataenable());
    }
    if (from.has_vismetadata()) {
      mutable_vismetadata()->::universe::VisMetaData::MergeFrom(from.vismetadata());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_visdata()) {
      mutable_visdata()->::universe::VisData::MergeFrom(from.visdata());
    }
  }
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_physpropsmsg()) {
    if (!this->physpropsmsg().IsInitialized()) return false;
  }
  if (has_collisionmsg()) {
    if (!this->collisionmsg().IsInitialized()) return false;
  }
  if (has_spawnmsg()) {
    if (!this->spawnmsg().IsInitialized()) return false;
  }
  if (has_beammsg()) {
    if (!this->beammsg().IsInitialized()) return false;
  }
  if (has_scanresultmsg()) {
    if (!this->scanresultmsg().IsInitialized()) return false;
  }
  if (has_scanquerymsg()) {
    if (!this->scanquerymsg().IsInitialized()) return false;
  }
  if (has_scanrespmsg()) {
    if (!this->scanrespmsg().IsInitialized()) return false;
  }
  return true;
}

void MessageWrapper::Swap(MessageWrapper* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(objectid_, other->objectid_);
    std::swap(hellomsg_, other->hellomsg_);
    std::swap(goodbyemsg_, other->goodbyemsg_);
    std::swap(physpropsmsg_, other->physpropsmsg_);
    std::swap(collisionmsg_, other->collisionmsg_);
    std::swap(spawnmsg_, other->spawnmsg_);
    std::swap(beammsg_, other->beammsg_);
    std::swap(scanresultmsg_, other->scanresultmsg_);
    std::swap(scanquerymsg_, other->scanquerymsg_);
    std::swap(scanrespmsg_, other->scanrespmsg_);
    std::swap(directorymsg_, other->directorymsg_);
    std::swap(visprops_, other->visprops_);
    std::swap(visdataenable_, other->visdataenable_);
    std::swap(vismetadataenable_, other->vismetadataenable_);
    std::swap(vismetadata_, other->vismetadata_);
    std::swap(visdata_, other->visdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessageWrapper::GetTypeName() const {
  return "universe.MessageWrapper";
}


// ===================================================================

#ifndef _MSC_VER
const int VectorMsg::kXFieldNumber;
const int VectorMsg::kYFieldNumber;
const int VectorMsg::kZFieldNumber;
#endif  // !_MSC_VER

VectorMsg::VectorMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VectorMsg::InitAsDefaultInstance() {
}

VectorMsg::VectorMsg(const VectorMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VectorMsg::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorMsg::~VectorMsg() {
  SharedDtor();
}

void VectorMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VectorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VectorMsg& VectorMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

VectorMsg* VectorMsg::default_instance_ = NULL;

VectorMsg* VectorMsg::New() const {
  return new VectorMsg;
}

void VectorMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VectorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

}

int VectorMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VectorMsg*>(&from));
}

void VectorMsg::MergeFrom(const VectorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void VectorMsg::CopyFrom(const VectorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VectorMsg::Swap(VectorMsg* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VectorMsg::GetTypeName() const {
  return "universe.VectorMsg";
}


// ===================================================================

::std::string* HelloMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int HelloMsg::kNameFieldNumber;
#endif  // !_MSC_VER

HelloMsg::HelloMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HelloMsg::InitAsDefaultInstance() {
}

HelloMsg::HelloMsg(const HelloMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HelloMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloMsg::~HelloMsg() {
  SharedDtor();
}

void HelloMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HelloMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HelloMsg& HelloMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

HelloMsg* HelloMsg::default_instance_ = NULL;

HelloMsg* HelloMsg::New() const {
  return new HelloMsg;
}

void HelloMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HelloMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "HELLO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "HELLO"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int HelloMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "HELLO"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HelloMsg*>(&from));
}

void HelloMsg::MergeFrom(const HelloMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void HelloMsg::CopyFrom(const HelloMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMsg::IsInitialized() const {

  return true;
}

void HelloMsg::Swap(HelloMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HelloMsg::GetTypeName() const {
  return "universe.HelloMsg";
}


// ===================================================================

::std::string* PhysPropsMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int PhysPropsMsg::kNameFieldNumber;
const int PhysPropsMsg::kMassFieldNumber;
const int PhysPropsMsg::kPositionFieldNumber;
const int PhysPropsMsg::kVelocityFieldNumber;
const int PhysPropsMsg::kOrientationFieldNumber;
const int PhysPropsMsg::kThrustFieldNumber;
const int PhysPropsMsg::kRadiusFieldNumber;
#endif  // !_MSC_VER

PhysPropsMsg::PhysPropsMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PhysPropsMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  position_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  velocity_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  velocity_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  orientation_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  orientation_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  thrust_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  thrust_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
}

PhysPropsMsg::PhysPropsMsg(const PhysPropsMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PhysPropsMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  mass_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  orientation_ = NULL;
  thrust_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhysPropsMsg::~PhysPropsMsg() {
  SharedDtor();
}

void PhysPropsMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete position_;
    delete velocity_;
    delete orientation_;
    delete thrust_;
  }
}

void PhysPropsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PhysPropsMsg& PhysPropsMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

PhysPropsMsg* PhysPropsMsg::default_instance_ = NULL;

PhysPropsMsg* PhysPropsMsg::New() const {
  return new PhysPropsMsg;
}

void PhysPropsMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    mass_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::universe::VectorMsg::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::universe::VectorMsg::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::universe::VectorMsg::Clear();
    }
    if (has_thrust()) {
      if (thrust_ != NULL) thrust_->::universe::VectorMsg::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PhysPropsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "PHYSPROPS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mass;
        break;
      }

      // optional double mass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .universe.VectorMsg position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // optional .universe.VectorMsg velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_orientation;
        break;
      }

      // optional .universe.VectorMsg orientation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_thrust;
        break;
      }

      // optional .universe.VectorMsg thrust = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thrust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thrust()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_radius;
        break;
      }

      // optional double radius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhysPropsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "PHYSPROPS"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional double mass = 2;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mass(), output);
  }

  // optional .universe.VectorMsg position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->position(), output);
  }

  // optional .universe.VectorMsg velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->velocity(), output);
  }

  // optional .universe.VectorMsg orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->orientation(), output);
  }

  // optional .universe.VectorMsg thrust = 6;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->thrust(), output);
  }

  // optional double radius = 7;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->radius(), output);
  }

}

int PhysPropsMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "PHYSPROPS"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double mass = 2;
    if (has_mass()) {
      total_size += 1 + 8;
    }

    // optional .universe.VectorMsg position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .universe.VectorMsg velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional .universe.VectorMsg orientation = 5;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation());
    }

    // optional .universe.VectorMsg thrust = 6;
    if (has_thrust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thrust());
    }

    // optional double radius = 7;
    if (has_radius()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysPropsMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PhysPropsMsg*>(&from));
}

void PhysPropsMsg::MergeFrom(const PhysPropsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_position()) {
      mutable_position()->::universe::VectorMsg::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::universe::VectorMsg::MergeFrom(from.velocity());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::universe::VectorMsg::MergeFrom(from.orientation());
    }
    if (from.has_thrust()) {
      mutable_thrust()->::universe::VectorMsg::MergeFrom(from.thrust());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
}

void PhysPropsMsg::CopyFrom(const PhysPropsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysPropsMsg::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation().IsInitialized()) return false;
  }
  if (has_thrust()) {
    if (!this->thrust().IsInitialized()) return false;
  }
  return true;
}

void PhysPropsMsg::Swap(PhysPropsMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mass_, other->mass_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(orientation_, other->orientation_);
    std::swap(thrust_, other->thrust_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PhysPropsMsg::GetTypeName() const {
  return "universe.PhysPropsMsg";
}


// ===================================================================

::std::string* GoodbyeMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int GoodbyeMsg::kNameFieldNumber;
#endif  // !_MSC_VER

GoodbyeMsg::GoodbyeMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GoodbyeMsg::InitAsDefaultInstance() {
}

GoodbyeMsg::GoodbyeMsg(const GoodbyeMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GoodbyeMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodbyeMsg::~GoodbyeMsg() {
  SharedDtor();
}

void GoodbyeMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GoodbyeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GoodbyeMsg& GoodbyeMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

GoodbyeMsg* GoodbyeMsg::default_instance_ = NULL;

GoodbyeMsg* GoodbyeMsg::New() const {
  return new GoodbyeMsg;
}

void GoodbyeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GoodbyeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "GOODBYE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodbyeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "GOODBYE"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int GoodbyeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "GOODBYE"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodbyeMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GoodbyeMsg*>(&from));
}

void GoodbyeMsg::MergeFrom(const GoodbyeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void GoodbyeMsg::CopyFrom(const GoodbyeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodbyeMsg::IsInitialized() const {

  return true;
}

void GoodbyeMsg::Swap(GoodbyeMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GoodbyeMsg::GetTypeName() const {
  return "universe.GoodbyeMsg";
}


// ===================================================================

bool CollisionMsg_CollisionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CollisionMsg_CollisionType CollisionMsg::PHYS_COLLISION;
const CollisionMsg_CollisionType CollisionMsg::SCAN_COLLISION;
const CollisionMsg_CollisionType CollisionMsg::WEAP_COLLISION;
const CollisionMsg_CollisionType CollisionMsg::COMM_COLLISION;
const CollisionMsg_CollisionType CollisionMsg::CollisionType_MIN;
const CollisionMsg_CollisionType CollisionMsg::CollisionType_MAX;
const int CollisionMsg::CollisionType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* CollisionMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int CollisionMsg::kNameFieldNumber;
const int CollisionMsg::kPositionFieldNumber;
const int CollisionMsg::kDirectionFieldNumber;
const int CollisionMsg::kEnergyFieldNumber;
const int CollisionMsg::kCollisionTypeFieldNumber;
const int CollisionMsg::kCommStringFieldNumber;
#endif  // !_MSC_VER

CollisionMsg::CollisionMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CollisionMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  position_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  direction_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  direction_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
}

CollisionMsg::CollisionMsg(const CollisionMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CollisionMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  position_ = NULL;
  direction_ = NULL;
  energy_ = 0;
  collisiontype_ = 1;
  commstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollisionMsg::~CollisionMsg() {
  SharedDtor();
}

void CollisionMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (commstring_ != &::google::protobuf::internal::kEmptyString) {
    delete commstring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete position_;
    delete direction_;
  }
}

void CollisionMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CollisionMsg& CollisionMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

CollisionMsg* CollisionMsg::default_instance_ = NULL;

CollisionMsg* CollisionMsg::New() const {
  return new CollisionMsg;
}

void CollisionMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::universe::VectorMsg::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::universe::VectorMsg::Clear();
    }
    energy_ = 0;
    collisiontype_ = 1;
    if (has_commstring()) {
      if (commstring_ != &::google::protobuf::internal::kEmptyString) {
        commstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CollisionMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "COLLISION"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required .universe.VectorMsg position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // required .universe.VectorMsg direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_energy;
        break;
      }

      // required double energy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_collisionType;
        break;
      }

      // required .universe.CollisionMsg.CollisionType collisionType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collisionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::universe::CollisionMsg_CollisionType_IsValid(value)) {
            set_collisiontype(static_cast< ::universe::CollisionMsg_CollisionType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_commString;
        break;
      }

      // optional string commString = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollisionMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "COLLISION"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .universe.VectorMsg position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->position(), output);
  }

  // required .universe.VectorMsg direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->direction(), output);
  }

  // required double energy = 4;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->energy(), output);
  }

  // required .universe.CollisionMsg.CollisionType collisionType = 5;
  if (has_collisiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->collisiontype(), output);
  }

  // optional string commString = 6;
  if (has_commstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->commstring(), output);
  }

}

int CollisionMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "COLLISION"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .universe.VectorMsg position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .universe.VectorMsg direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // required double energy = 4;
    if (has_energy()) {
      total_size += 1 + 8;
    }

    // required .universe.CollisionMsg.CollisionType collisionType = 5;
    if (has_collisiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->collisiontype());
    }

    // optional string commString = 6;
    if (has_commstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commstring());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CollisionMsg*>(&from));
}

void CollisionMsg::MergeFrom(const CollisionMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::universe::VectorMsg::MergeFrom(from.position());
    }
    if (from.has_direction()) {
      mutable_direction()->::universe::VectorMsg::MergeFrom(from.direction());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_collisiontype()) {
      set_collisiontype(from.collisiontype());
    }
    if (from.has_commstring()) {
      set_commstring(from.commstring());
    }
  }
}

void CollisionMsg::CopyFrom(const CollisionMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  return true;
}

void CollisionMsg::Swap(CollisionMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(energy_, other->energy_);
    std::swap(collisiontype_, other->collisiontype_);
    std::swap(commstring_, other->commstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CollisionMsg::GetTypeName() const {
  return "universe.CollisionMsg";
}


// ===================================================================

::std::string* SpawnMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int SpawnMsg::kNameFieldNumber;
const int SpawnMsg::kMassFieldNumber;
const int SpawnMsg::kPositionFieldNumber;
const int SpawnMsg::kVelocityFieldNumber;
const int SpawnMsg::kOrientationFieldNumber;
const int SpawnMsg::kThrustFieldNumber;
const int SpawnMsg::kRadiusFieldNumber;
#endif  // !_MSC_VER

SpawnMsg::SpawnMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpawnMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  position_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  velocity_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  velocity_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  orientation_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  orientation_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  thrust_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  thrust_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
}

SpawnMsg::SpawnMsg(const SpawnMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpawnMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  mass_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  orientation_ = NULL;
  thrust_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpawnMsg::~SpawnMsg() {
  SharedDtor();
}

void SpawnMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete position_;
    delete velocity_;
    delete orientation_;
    delete thrust_;
  }
}

void SpawnMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpawnMsg& SpawnMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

SpawnMsg* SpawnMsg::default_instance_ = NULL;

SpawnMsg* SpawnMsg::New() const {
  return new SpawnMsg;
}

void SpawnMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    mass_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::universe::VectorMsg::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::universe::VectorMsg::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::universe::VectorMsg::Clear();
    }
    if (has_thrust()) {
      if (thrust_ != NULL) thrust_->::universe::VectorMsg::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpawnMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "SPAWN"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mass;
        break;
      }

      // required double mass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .universe.VectorMsg position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // required .universe.VectorMsg velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_orientation;
        break;
      }

      // required .universe.VectorMsg orientation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_thrust;
        break;
      }

      // required .universe.VectorMsg thrust = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thrust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thrust()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_radius;
        break;
      }

      // required double radius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpawnMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "SPAWN"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double mass = 2;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mass(), output);
  }

  // required .universe.VectorMsg position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->position(), output);
  }

  // required .universe.VectorMsg velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->velocity(), output);
  }

  // required .universe.VectorMsg orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->orientation(), output);
  }

  // required .universe.VectorMsg thrust = 6;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->thrust(), output);
  }

  // required double radius = 7;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->radius(), output);
  }

}

int SpawnMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "SPAWN"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double mass = 2;
    if (has_mass()) {
      total_size += 1 + 8;
    }

    // required .universe.VectorMsg position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .universe.VectorMsg velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required .universe.VectorMsg orientation = 5;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation());
    }

    // required .universe.VectorMsg thrust = 6;
    if (has_thrust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thrust());
    }

    // required double radius = 7;
    if (has_radius()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpawnMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpawnMsg*>(&from));
}

void SpawnMsg::MergeFrom(const SpawnMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_position()) {
      mutable_position()->::universe::VectorMsg::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::universe::VectorMsg::MergeFrom(from.velocity());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::universe::VectorMsg::MergeFrom(from.orientation());
    }
    if (from.has_thrust()) {
      mutable_thrust()->::universe::VectorMsg::MergeFrom(from.thrust());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
}

void SpawnMsg::CopyFrom(const SpawnMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation().IsInitialized()) return false;
  }
  if (has_thrust()) {
    if (!this->thrust().IsInitialized()) return false;
  }
  return true;
}

void SpawnMsg::Swap(SpawnMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mass_, other->mass_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(orientation_, other->orientation_);
    std::swap(thrust_, other->thrust_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpawnMsg::GetTypeName() const {
  return "universe.SpawnMsg";
}


// ===================================================================

::std::string* VisProps::_default_name_ = NULL;
#ifndef _MSC_VER
const int VisProps::kNameFieldNumber;
#endif  // !_MSC_VER

VisProps::VisProps()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VisProps::InitAsDefaultInstance() {
}

VisProps::VisProps(const VisProps& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VisProps::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisProps::~VisProps() {
  SharedDtor();
}

void VisProps::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VisProps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VisProps& VisProps::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

VisProps* VisProps::default_instance_ = NULL;

VisProps* VisProps::New() const {
  return new VisProps;
}

void VisProps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VisProps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "VISPROPS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisProps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "VISPROPS"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int VisProps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "VISPROPS"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisProps::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VisProps*>(&from));
}

void VisProps::MergeFrom(const VisProps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void VisProps::CopyFrom(const VisProps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisProps::IsInitialized() const {

  return true;
}

void VisProps::Swap(VisProps* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VisProps::GetTypeName() const {
  return "universe.VisProps";
}


// ===================================================================

::std::string* VisDataEnable::_default_name_ = NULL;
#ifndef _MSC_VER
const int VisDataEnable::kNameFieldNumber;
#endif  // !_MSC_VER

VisDataEnable::VisDataEnable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VisDataEnable::InitAsDefaultInstance() {
}

VisDataEnable::VisDataEnable(const VisDataEnable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VisDataEnable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisDataEnable::~VisDataEnable() {
  SharedDtor();
}

void VisDataEnable::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VisDataEnable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VisDataEnable& VisDataEnable::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

VisDataEnable* VisDataEnable::default_instance_ = NULL;

VisDataEnable* VisDataEnable::New() const {
  return new VisDataEnable;
}

void VisDataEnable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VisDataEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "VISDATAENABLE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisDataEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "VISDATAENABLE"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int VisDataEnable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "VISDATAENABLE"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisDataEnable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VisDataEnable*>(&from));
}

void VisDataEnable::MergeFrom(const VisDataEnable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void VisDataEnable::CopyFrom(const VisDataEnable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisDataEnable::IsInitialized() const {

  return true;
}

void VisDataEnable::Swap(VisDataEnable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VisDataEnable::GetTypeName() const {
  return "universe.VisDataEnable";
}


// ===================================================================

::std::string* VisData::_default_name_ = NULL;
#ifndef _MSC_VER
const int VisData::kNameFieldNumber;
#endif  // !_MSC_VER

VisData::VisData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VisData::InitAsDefaultInstance() {
}

VisData::VisData(const VisData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VisData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisData::~VisData() {
  SharedDtor();
}

void VisData::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VisData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VisData& VisData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

VisData* VisData::default_instance_ = NULL;

VisData* VisData::New() const {
  return new VisData;
}

void VisData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VisData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "VISDATA"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "VISDATA"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int VisData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "VISDATA"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VisData*>(&from));
}

void VisData::MergeFrom(const VisData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void VisData::CopyFrom(const VisData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisData::IsInitialized() const {

  return true;
}

void VisData::Swap(VisData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VisData::GetTypeName() const {
  return "universe.VisData";
}


// ===================================================================

::std::string* VisMetaData::_default_name_ = NULL;
#ifndef _MSC_VER
const int VisMetaData::kNameFieldNumber;
#endif  // !_MSC_VER

VisMetaData::VisMetaData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VisMetaData::InitAsDefaultInstance() {
}

VisMetaData::VisMetaData(const VisMetaData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VisMetaData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisMetaData::~VisMetaData() {
  SharedDtor();
}

void VisMetaData::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VisMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VisMetaData& VisMetaData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

VisMetaData* VisMetaData::default_instance_ = NULL;

VisMetaData* VisMetaData::New() const {
  return new VisMetaData;
}

void VisMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VisMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "VISMETADATA"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "VISMETADATA"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int VisMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "VISMETADATA"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisMetaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VisMetaData*>(&from));
}

void VisMetaData::MergeFrom(const VisMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void VisMetaData::CopyFrom(const VisMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisMetaData::IsInitialized() const {

  return true;
}

void VisMetaData::Swap(VisMetaData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VisMetaData::GetTypeName() const {
  return "universe.VisMetaData";
}


// ===================================================================

::std::string* VisMetaDataEnable::_default_name_ = NULL;
#ifndef _MSC_VER
const int VisMetaDataEnable::kNameFieldNumber;
#endif  // !_MSC_VER

VisMetaDataEnable::VisMetaDataEnable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VisMetaDataEnable::InitAsDefaultInstance() {
}

VisMetaDataEnable::VisMetaDataEnable(const VisMetaDataEnable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VisMetaDataEnable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisMetaDataEnable::~VisMetaDataEnable() {
  SharedDtor();
}

void VisMetaDataEnable::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VisMetaDataEnable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VisMetaDataEnable& VisMetaDataEnable::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

VisMetaDataEnable* VisMetaDataEnable::default_instance_ = NULL;

VisMetaDataEnable* VisMetaDataEnable::New() const {
  return new VisMetaDataEnable;
}

void VisMetaDataEnable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VisMetaDataEnable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "VISMETADATAENABLE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisMetaDataEnable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "VISMETADATAENABLE"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int VisMetaDataEnable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "VISMETADATAENABLE"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisMetaDataEnable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VisMetaDataEnable*>(&from));
}

void VisMetaDataEnable::MergeFrom(const VisMetaDataEnable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void VisMetaDataEnable::CopyFrom(const VisMetaDataEnable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisMetaDataEnable::IsInitialized() const {

  return true;
}

void VisMetaDataEnable::Swap(VisMetaDataEnable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VisMetaDataEnable::GetTypeName() const {
  return "universe.VisMetaDataEnable";
}


// ===================================================================

bool BeamMsg_BeamType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BeamMsg_BeamType BeamMsg::SCAN;
const BeamMsg_BeamType BeamMsg::WEAP;
const BeamMsg_BeamType BeamMsg::COMM;
const BeamMsg_BeamType BeamMsg::BeamType_MIN;
const BeamMsg_BeamType BeamMsg::BeamType_MAX;
const int BeamMsg::BeamType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* BeamMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int BeamMsg::kNameFieldNumber;
const int BeamMsg::kOriginFieldNumber;
const int BeamMsg::kVelocityFieldNumber;
const int BeamMsg::kUpFieldNumber;
const int BeamMsg::kSpreadHFieldNumber;
const int BeamMsg::kSpreadVFieldNumber;
const int BeamMsg::kEnergyFieldNumber;
const int BeamMsg::kBeamTypeFieldNumber;
const int BeamMsg::kCommStringFieldNumber;
#endif  // !_MSC_VER

BeamMsg::BeamMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BeamMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  origin_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  origin_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  velocity_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  velocity_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  up_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  up_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
}

BeamMsg::BeamMsg(const BeamMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BeamMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  origin_ = NULL;
  velocity_ = NULL;
  up_ = NULL;
  spread_h_ = 0;
  spread_v_ = 0;
  energy_ = 0;
  beamtype_ = 1;
  commstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeamMsg::~BeamMsg() {
  SharedDtor();
}

void BeamMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (commstring_ != &::google::protobuf::internal::kEmptyString) {
    delete commstring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete origin_;
    delete velocity_;
    delete up_;
  }
}

void BeamMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeamMsg& BeamMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

BeamMsg* BeamMsg::default_instance_ = NULL;

BeamMsg* BeamMsg::New() const {
  return new BeamMsg;
}

void BeamMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::universe::VectorMsg::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::universe::VectorMsg::Clear();
    }
    if (has_up()) {
      if (up_ != NULL) up_->::universe::VectorMsg::Clear();
    }
    spread_h_ = 0;
    spread_v_ = 0;
    energy_ = 0;
    beamtype_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_commstring()) {
      if (commstring_ != &::google::protobuf::internal::kEmptyString) {
        commstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BeamMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "BEAM"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_origin;
        break;
      }

      // required .universe.VectorMsg origin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // required .universe.VectorMsg velocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_up;
        break;
      }

      // required .universe.VectorMsg up = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_spread_h;
        break;
      }

      // required double spread_h = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_spread_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spread_h_)));
          set_has_spread_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_spread_v;
        break;
      }

      // required double spread_v = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_spread_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spread_v_)));
          set_has_spread_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_energy;
        break;
      }

      // required double energy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_beamType;
        break;
      }

      // required .universe.BeamMsg.BeamType beamType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beamType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::universe::BeamMsg_BeamType_IsValid(value)) {
            set_beamtype(static_cast< ::universe::BeamMsg_BeamType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_commString;
        break;
      }

      // optional string commString = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeamMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "BEAM"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .universe.VectorMsg origin = 2;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->origin(), output);
  }

  // required .universe.VectorMsg velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->velocity(), output);
  }

  // required .universe.VectorMsg up = 4;
  if (has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->up(), output);
  }

  // required double spread_h = 5;
  if (has_spread_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->spread_h(), output);
  }

  // required double spread_v = 6;
  if (has_spread_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->spread_v(), output);
  }

  // required double energy = 7;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->energy(), output);
  }

  // required .universe.BeamMsg.BeamType beamType = 8;
  if (has_beamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->beamtype(), output);
  }

  // optional string commString = 9;
  if (has_commstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->commstring(), output);
  }

}

int BeamMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "BEAM"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .universe.VectorMsg origin = 2;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // required .universe.VectorMsg velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required .universe.VectorMsg up = 4;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->up());
    }

    // required double spread_h = 5;
    if (has_spread_h()) {
      total_size += 1 + 8;
    }

    // required double spread_v = 6;
    if (has_spread_v()) {
      total_size += 1 + 8;
    }

    // required double energy = 7;
    if (has_energy()) {
      total_size += 1 + 8;
    }

    // required .universe.BeamMsg.BeamType beamType = 8;
    if (has_beamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->beamtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string commString = 9;
    if (has_commstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commstring());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeamMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeamMsg*>(&from));
}

void BeamMsg::MergeFrom(const BeamMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_origin()) {
      mutable_origin()->::universe::VectorMsg::MergeFrom(from.origin());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::universe::VectorMsg::MergeFrom(from.velocity());
    }
    if (from.has_up()) {
      mutable_up()->::universe::VectorMsg::MergeFrom(from.up());
    }
    if (from.has_spread_h()) {
      set_spread_h(from.spread_h());
    }
    if (from.has_spread_v()) {
      set_spread_v(from.spread_v());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_beamtype()) {
      set_beamtype(from.beamtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_commstring()) {
      set_commstring(from.commstring());
    }
  }
}

void BeamMsg::CopyFrom(const BeamMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;

  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_up()) {
    if (!this->up().IsInitialized()) return false;
  }
  return true;
}

void BeamMsg::Swap(BeamMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(origin_, other->origin_);
    std::swap(velocity_, other->velocity_);
    std::swap(up_, other->up_);
    std::swap(spread_h_, other->spread_h_);
    std::swap(spread_v_, other->spread_v_);
    std::swap(energy_, other->energy_);
    std::swap(beamtype_, other->beamtype_);
    std::swap(commstring_, other->commstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BeamMsg::GetTypeName() const {
  return "universe.BeamMsg";
}


// ===================================================================

::std::string* ScanResultMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int ScanResultMsg::kNameFieldNumber;
const int ScanResultMsg::kMassFieldNumber;
const int ScanResultMsg::kPositionFieldNumber;
const int ScanResultMsg::kVelocityFieldNumber;
const int ScanResultMsg::kOrientationFieldNumber;
const int ScanResultMsg::kThrustFieldNumber;
const int ScanResultMsg::kRadiusFieldNumber;
const int ScanResultMsg::kExtraParmsFieldNumber;
#endif  // !_MSC_VER

ScanResultMsg::ScanResultMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScanResultMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  position_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  position_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  velocity_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  velocity_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  orientation_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  orientation_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  thrust_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  thrust_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
}

ScanResultMsg::ScanResultMsg(const ScanResultMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScanResultMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  mass_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  orientation_ = NULL;
  thrust_ = NULL;
  radius_ = 0;
  extraparms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanResultMsg::~ScanResultMsg() {
  SharedDtor();
}

void ScanResultMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (extraparms_ != &::google::protobuf::internal::kEmptyString) {
    delete extraparms_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete position_;
    delete velocity_;
    delete orientation_;
    delete thrust_;
  }
}

void ScanResultMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScanResultMsg& ScanResultMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

ScanResultMsg* ScanResultMsg::default_instance_ = NULL;

ScanResultMsg* ScanResultMsg::New() const {
  return new ScanResultMsg;
}

void ScanResultMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    mass_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::universe::VectorMsg::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::universe::VectorMsg::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::universe::VectorMsg::Clear();
    }
    if (has_thrust()) {
      if (thrust_ != NULL) thrust_->::universe::VectorMsg::Clear();
    }
    radius_ = 0;
    if (has_extraparms()) {
      if (extraparms_ != &::google::protobuf::internal::kEmptyString) {
        extraparms_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScanResultMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "SCANRESULT"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mass;
        break;
      }

      // required double mass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .universe.VectorMsg position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // required .universe.VectorMsg velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_orientation;
        break;
      }

      // required .universe.VectorMsg orientation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_thrust;
        break;
      }

      // required .universe.VectorMsg thrust = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thrust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thrust()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_radius;
        break;
      }

      // required double radius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extraParms;
        break;
      }

      // optional string extraParms = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraParms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extraparms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanResultMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "SCANRESULT"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double mass = 2;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mass(), output);
  }

  // required .universe.VectorMsg position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->position(), output);
  }

  // required .universe.VectorMsg velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->velocity(), output);
  }

  // required .universe.VectorMsg orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->orientation(), output);
  }

  // required .universe.VectorMsg thrust = 6;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->thrust(), output);
  }

  // required double radius = 7;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->radius(), output);
  }

  // optional string extraParms = 8;
  if (has_extraparms()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->extraparms(), output);
  }

}

int ScanResultMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "SCANRESULT"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double mass = 2;
    if (has_mass()) {
      total_size += 1 + 8;
    }

    // required .universe.VectorMsg position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .universe.VectorMsg velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required .universe.VectorMsg orientation = 5;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation());
    }

    // required .universe.VectorMsg thrust = 6;
    if (has_thrust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thrust());
    }

    // required double radius = 7;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional string extraParms = 8;
    if (has_extraparms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extraparms());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanResultMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScanResultMsg*>(&from));
}

void ScanResultMsg::MergeFrom(const ScanResultMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_position()) {
      mutable_position()->::universe::VectorMsg::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::universe::VectorMsg::MergeFrom(from.velocity());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::universe::VectorMsg::MergeFrom(from.orientation());
    }
    if (from.has_thrust()) {
      mutable_thrust()->::universe::VectorMsg::MergeFrom(from.thrust());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_extraparms()) {
      set_extraparms(from.extraparms());
    }
  }
}

void ScanResultMsg::CopyFrom(const ScanResultMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResultMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation().IsInitialized()) return false;
  }
  if (has_thrust()) {
    if (!this->thrust().IsInitialized()) return false;
  }
  return true;
}

void ScanResultMsg::Swap(ScanResultMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mass_, other->mass_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(orientation_, other->orientation_);
    std::swap(thrust_, other->thrust_);
    std::swap(radius_, other->radius_);
    std::swap(extraparms_, other->extraparms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScanResultMsg::GetTypeName() const {
  return "universe.ScanResultMsg";
}


// ===================================================================

::std::string* ScanQueryMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int ScanQueryMsg::kNameFieldNumber;
const int ScanQueryMsg::kScanIDFieldNumber;
const int ScanQueryMsg::kScanPowerFieldNumber;
const int ScanQueryMsg::kScanDirFieldNumber;
#endif  // !_MSC_VER

ScanQueryMsg::ScanQueryMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScanQueryMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scandir_ = const_cast< ::universe::VectorMsg*>(
      ::universe::VectorMsg::internal_default_instance());
#else
  scandir_ = const_cast< ::universe::VectorMsg*>(&::universe::VectorMsg::default_instance());
#endif
}

ScanQueryMsg::ScanQueryMsg(const ScanQueryMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScanQueryMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  scanid_ = 0;
  scanpower_ = 0;
  scandir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanQueryMsg::~ScanQueryMsg() {
  SharedDtor();
}

void ScanQueryMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete scandir_;
  }
}

void ScanQueryMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScanQueryMsg& ScanQueryMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

ScanQueryMsg* ScanQueryMsg::default_instance_ = NULL;

ScanQueryMsg* ScanQueryMsg::New() const {
  return new ScanQueryMsg;
}

void ScanQueryMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    scanid_ = 0;
    scanpower_ = 0;
    if (has_scandir()) {
      if (scandir_ != NULL) scandir_->::universe::VectorMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScanQueryMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "SCANQUERY"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scanID;
        break;
      }

      // required int32 scanID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scanid_)));
          set_has_scanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_scanPower;
        break;
      }

      // required double scanPower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scanPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scanpower_)));
          set_has_scanpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scanDir;
        break;
      }

      // required .universe.VectorMsg scanDir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scandir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanQueryMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "SCANQUERY"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 scanID = 2;
  if (has_scanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scanid(), output);
  }

  // required double scanPower = 3;
  if (has_scanpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->scanpower(), output);
  }

  // required .universe.VectorMsg scanDir = 4;
  if (has_scandir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->scandir(), output);
  }

}

int ScanQueryMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "SCANQUERY"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 scanID = 2;
    if (has_scanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scanid());
    }

    // required double scanPower = 3;
    if (has_scanpower()) {
      total_size += 1 + 8;
    }

    // required .universe.VectorMsg scanDir = 4;
    if (has_scandir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scandir());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanQueryMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScanQueryMsg*>(&from));
}

void ScanQueryMsg::MergeFrom(const ScanQueryMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_scanid()) {
      set_scanid(from.scanid());
    }
    if (from.has_scanpower()) {
      set_scanpower(from.scanpower());
    }
    if (from.has_scandir()) {
      mutable_scandir()->::universe::VectorMsg::MergeFrom(from.scandir());
    }
  }
}

void ScanQueryMsg::CopyFrom(const ScanQueryMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanQueryMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_scandir()) {
    if (!this->scandir().IsInitialized()) return false;
  }
  return true;
}

void ScanQueryMsg::Swap(ScanQueryMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(scanid_, other->scanid_);
    std::swap(scanpower_, other->scanpower_);
    std::swap(scandir_, other->scandir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScanQueryMsg::GetTypeName() const {
  return "universe.ScanQueryMsg";
}


// ===================================================================

::std::string* ScanRespMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int ScanRespMsg::kNameFieldNumber;
const int ScanRespMsg::kScanIDFieldNumber;
const int ScanRespMsg::kParmsFieldNumber;
#endif  // !_MSC_VER

ScanRespMsg::ScanRespMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScanRespMsg::InitAsDefaultInstance() {
}

ScanRespMsg::ScanRespMsg(const ScanRespMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScanRespMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  scanid_ = 0;
  parms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanRespMsg::~ScanRespMsg() {
  SharedDtor();
}

void ScanRespMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (parms_ != &::google::protobuf::internal::kEmptyString) {
    delete parms_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScanRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScanRespMsg& ScanRespMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

ScanRespMsg* ScanRespMsg::default_instance_ = NULL;

ScanRespMsg* ScanRespMsg::New() const {
  return new ScanRespMsg;
}

void ScanRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    scanid_ = 0;
    if (has_parms()) {
      if (parms_ != &::google::protobuf::internal::kEmptyString) {
        parms_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScanRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "SCANRESP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scanID;
        break;
      }

      // required int32 scanID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scanID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scanid_)));
          set_has_scanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parms;
        break;
      }

      // required string parms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "SCANRESP"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 scanID = 2;
  if (has_scanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scanid(), output);
  }

  // required string parms = 3;
  if (has_parms()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parms(), output);
  }

}

int ScanRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "SCANRESP"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 scanID = 2;
    if (has_scanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scanid());
    }

    // required string parms = 3;
    if (has_parms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parms());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanRespMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScanRespMsg*>(&from));
}

void ScanRespMsg::MergeFrom(const ScanRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_scanid()) {
      set_scanid(from.scanid());
    }
    if (from.has_parms()) {
      set_parms(from.parms());
    }
  }
}

void ScanRespMsg::CopyFrom(const ScanRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void ScanRespMsg::Swap(ScanRespMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(scanid_, other->scanid_);
    std::swap(parms_, other->parms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScanRespMsg::GetTypeName() const {
  return "universe.ScanRespMsg";
}


// ===================================================================

::std::string* DirectoryMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int DirectoryMsg::kNameFieldNumber;
#endif  // !_MSC_VER

DirectoryMsg::DirectoryMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DirectoryMsg::InitAsDefaultInstance() {
}

DirectoryMsg::DirectoryMsg(const DirectoryMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DirectoryMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectoryMsg::~DirectoryMsg() {
  SharedDtor();
}

void DirectoryMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DirectoryMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectoryMsg& DirectoryMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_universe_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_universe_2eproto();
#endif
  return *default_instance_;
}

DirectoryMsg* DirectoryMsg::default_instance_ = NULL;

DirectoryMsg* DirectoryMsg::New() const {
  return new DirectoryMsg;
}

void DirectoryMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DirectoryMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "DIRECTORY"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirectoryMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "DIRECTORY"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int DirectoryMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "DIRECTORY"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectoryMsg*>(&from));
}

void DirectoryMsg::MergeFrom(const DirectoryMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void DirectoryMsg::CopyFrom(const DirectoryMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryMsg::IsInitialized() const {

  return true;
}

void DirectoryMsg::Swap(DirectoryMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DirectoryMsg::GetTypeName() const {
  return "universe.DirectoryMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace universe

// @@protoc_insertion_point(global_scope)
