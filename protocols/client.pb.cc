// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* MessageWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageWrapper_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageWrapper_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VectorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThrustMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThrustMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* VelocityMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VelocityMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* JumpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JumpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  MessageWrapper_descriptor_ = file->message_type(0);
  static const int MessageWrapper_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, thrustmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, velocitymsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, jumpmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, infomsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, requestmsg_),
  };
  MessageWrapper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageWrapper_descriptor_,
      MessageWrapper::default_instance_,
      MessageWrapper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageWrapper));
  MessageWrapper_MessageType_descriptor_ = MessageWrapper_descriptor_->enum_type(0);
  VectorMsg_descriptor_ = file->message_type(1);
  static const int VectorMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorMsg, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorMsg, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorMsg, z_),
  };
  VectorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorMsg_descriptor_,
      VectorMsg::default_instance_,
      VectorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorMsg));
  ThrustMsg_descriptor_ = file->message_type(2);
  static const int ThrustMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThrustMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThrustMsg, thrust_),
  };
  ThrustMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThrustMsg_descriptor_,
      ThrustMsg::default_instance_,
      ThrustMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThrustMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThrustMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThrustMsg));
  VelocityMsg_descriptor_ = file->message_type(3);
  static const int VelocityMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityMsg, velocity_),
  };
  VelocityMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VelocityMsg_descriptor_,
      VelocityMsg::default_instance_,
      VelocityMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VelocityMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VelocityMsg));
  JumpMsg_descriptor_ = file->message_type(4);
  static const int JumpMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpMsg, new_position_),
  };
  JumpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JumpMsg_descriptor_,
      JumpMsg::default_instance_,
      JumpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JumpMsg));
  InfoMsg_descriptor_ = file->message_type(5);
  static const int InfoMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, data_),
  };
  InfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfoMsg_descriptor_,
      InfoMsg::default_instance_,
      InfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfoMsg));
  RequestMsg_descriptor_ = file->message_type(6);
  static const int RequestMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMsg, continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMsg, requesttype_),
  };
  RequestMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMsg_descriptor_,
      RequestMsg::default_instance_,
      RequestMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageWrapper_descriptor_, &MessageWrapper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorMsg_descriptor_, &VectorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThrustMsg_descriptor_, &ThrustMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VelocityMsg_descriptor_, &VelocityMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JumpMsg_descriptor_, &JumpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfoMsg_descriptor_, &InfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMsg_descriptor_, &RequestMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete MessageWrapper::default_instance_;
  delete MessageWrapper_reflection_;
  delete VectorMsg::default_instance_;
  delete VectorMsg_reflection_;
  delete ThrustMsg::default_instance_;
  delete ThrustMsg_reflection_;
  delete ThrustMsg::_default_name_;
  delete VelocityMsg::default_instance_;
  delete VelocityMsg_reflection_;
  delete VelocityMsg::_default_name_;
  delete JumpMsg::default_instance_;
  delete JumpMsg_reflection_;
  delete JumpMsg::_default_name_;
  delete InfoMsg::default_instance_;
  delete InfoMsg_reflection_;
  delete InfoMsg::_default_name_;
  delete RequestMsg::default_instance_;
  delete RequestMsg_reflection_;
  delete RequestMsg::_default_name_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022\006client\"\317\002\n\016MessageWrappe"
    "r\0227\n\013messageType\030\001 \002(\0162\".client.MessageW"
    "rapper.MessageType\022$\n\tthrustMsg\030\002 \001(\0132\021."
    "client.ThrustMsg\022(\n\013velocityMsg\030\003 \001(\0132\023."
    "client.VelocityMsg\022 \n\007jumpMsg\030\004 \001(\0132\017.cl"
    "ient.JumpMsg\022 \n\007infoMsg\030\005 \001(\0132\017.client.I"
    "nfoMsg\022&\n\nrequestMsg\030\006 \001(\0132\022.client.Requ"
    "estMsg\"H\n\013MessageType\022\n\n\006THRUST\020\001\022\014\n\010VEL"
    "OCITY\020\002\022\010\n\004JUMP\020\003\022\010\n\004INFO\020\004\022\013\n\007REQUEST\020\005"
    "\",\n\tVectorMsg\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z"
    "\030\003 \002(\001\"D\n\tThrustMsg\022\024\n\004name\030\001 \001(\t:\006THRUS"
    "T\022!\n\006thrust\030\002 \002(\0132\021.client.VectorMsg\"J\n\013"
    "VelocityMsg\022\026\n\004name\030\001 \001(\t:\010VELOCITY\022#\n\010v"
    "elocity\030\002 \002(\0132\021.client.VectorMsg\"F\n\007Jump"
    "Msg\022\022\n\004name\030\001 \001(\t:\004JUMP\022\'\n\014new_position\030"
    "\002 \002(\0132\021.client.VectorMsg\"=\n\007InfoMsg\022\022\n\004n"
    "ame\030\001 \001(\t:\004INFO\022\020\n\010infoType\030\002 \002(\t\022\014\n\004dat"
    "a\030\003 \002(\t\"L\n\nRequestMsg\022\025\n\004name\030\001 \001(\t:\007REQ"
    "UEST\022\022\n\ncontinuous\030\002 \002(\005\022\023\n\013requestType\030"
    "\003 \002(\t", 765);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  MessageWrapper::default_instance_ = new MessageWrapper();
  VectorMsg::default_instance_ = new VectorMsg();
  ThrustMsg::_default_name_ =
      new ::std::string("THRUST", 6);
  ThrustMsg::default_instance_ = new ThrustMsg();
  VelocityMsg::_default_name_ =
      new ::std::string("VELOCITY", 8);
  VelocityMsg::default_instance_ = new VelocityMsg();
  JumpMsg::_default_name_ =
      new ::std::string("JUMP", 4);
  JumpMsg::default_instance_ = new JumpMsg();
  InfoMsg::_default_name_ =
      new ::std::string("INFO", 4);
  InfoMsg::default_instance_ = new InfoMsg();
  RequestMsg::_default_name_ =
      new ::std::string("REQUEST", 7);
  RequestMsg::default_instance_ = new RequestMsg();
  MessageWrapper::default_instance_->InitAsDefaultInstance();
  VectorMsg::default_instance_->InitAsDefaultInstance();
  ThrustMsg::default_instance_->InitAsDefaultInstance();
  VelocityMsg::default_instance_->InitAsDefaultInstance();
  JumpMsg::default_instance_->InitAsDefaultInstance();
  InfoMsg::default_instance_->InitAsDefaultInstance();
  RequestMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageWrapper_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageWrapper_MessageType_descriptor_;
}
bool MessageWrapper_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageWrapper_MessageType MessageWrapper::THRUST;
const MessageWrapper_MessageType MessageWrapper::VELOCITY;
const MessageWrapper_MessageType MessageWrapper::JUMP;
const MessageWrapper_MessageType MessageWrapper::INFO;
const MessageWrapper_MessageType MessageWrapper::REQUEST;
const MessageWrapper_MessageType MessageWrapper::MessageType_MIN;
const MessageWrapper_MessageType MessageWrapper::MessageType_MAX;
const int MessageWrapper::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageWrapper::kMessageTypeFieldNumber;
const int MessageWrapper::kThrustMsgFieldNumber;
const int MessageWrapper::kVelocityMsgFieldNumber;
const int MessageWrapper::kJumpMsgFieldNumber;
const int MessageWrapper::kInfoMsgFieldNumber;
const int MessageWrapper::kRequestMsgFieldNumber;
#endif  // !_MSC_VER

MessageWrapper::MessageWrapper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageWrapper::InitAsDefaultInstance() {
  thrustmsg_ = const_cast< ::client::ThrustMsg*>(&::client::ThrustMsg::default_instance());
  velocitymsg_ = const_cast< ::client::VelocityMsg*>(&::client::VelocityMsg::default_instance());
  jumpmsg_ = const_cast< ::client::JumpMsg*>(&::client::JumpMsg::default_instance());
  infomsg_ = const_cast< ::client::InfoMsg*>(&::client::InfoMsg::default_instance());
  requestmsg_ = const_cast< ::client::RequestMsg*>(&::client::RequestMsg::default_instance());
}

MessageWrapper::MessageWrapper(const MessageWrapper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageWrapper::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 1;
  thrustmsg_ = NULL;
  velocitymsg_ = NULL;
  jumpmsg_ = NULL;
  infomsg_ = NULL;
  requestmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageWrapper::~MessageWrapper() {
  SharedDtor();
}

void MessageWrapper::SharedDtor() {
  if (this != default_instance_) {
    delete thrustmsg_;
    delete velocitymsg_;
    delete jumpmsg_;
    delete infomsg_;
    delete requestmsg_;
  }
}

void MessageWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageWrapper_descriptor_;
}

const MessageWrapper& MessageWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

MessageWrapper* MessageWrapper::default_instance_ = NULL;

MessageWrapper* MessageWrapper::New() const {
  return new MessageWrapper;
}

void MessageWrapper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 1;
    if (has_thrustmsg()) {
      if (thrustmsg_ != NULL) thrustmsg_->::client::ThrustMsg::Clear();
    }
    if (has_velocitymsg()) {
      if (velocitymsg_ != NULL) velocitymsg_->::client::VelocityMsg::Clear();
    }
    if (has_jumpmsg()) {
      if (jumpmsg_ != NULL) jumpmsg_->::client::JumpMsg::Clear();
    }
    if (has_infomsg()) {
      if (infomsg_ != NULL) infomsg_->::client::InfoMsg::Clear();
    }
    if (has_requestmsg()) {
      if (requestmsg_ != NULL) requestmsg_->::client::RequestMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.MessageWrapper.MessageType messageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::MessageWrapper_MessageType_IsValid(value)) {
            set_messagetype(static_cast< ::client::MessageWrapper_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_thrustMsg;
        break;
      }

      // optional .client.ThrustMsg thrustMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thrustMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thrustmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velocityMsg;
        break;
      }

      // optional .client.VelocityMsg velocityMsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocityMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocitymsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jumpMsg;
        break;
      }

      // optional .client.JumpMsg jumpMsg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jumpMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jumpmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_infoMsg;
        break;
      }

      // optional .client.InfoMsg infoMsg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infomsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_requestMsg;
        break;
      }

      // optional .client.RequestMsg requestMsg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.MessageWrapper.MessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .client.ThrustMsg thrustMsg = 2;
  if (has_thrustmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->thrustmsg(), output);
  }

  // optional .client.VelocityMsg velocityMsg = 3;
  if (has_velocitymsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocitymsg(), output);
  }

  // optional .client.JumpMsg jumpMsg = 4;
  if (has_jumpmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->jumpmsg(), output);
  }

  // optional .client.InfoMsg infoMsg = 5;
  if (has_infomsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->infomsg(), output);
  }

  // optional .client.RequestMsg requestMsg = 6;
  if (has_requestmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->requestmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageWrapper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.MessageWrapper.MessageType messageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // optional .client.ThrustMsg thrustMsg = 2;
  if (has_thrustmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->thrustmsg(), target);
  }

  // optional .client.VelocityMsg velocityMsg = 3;
  if (has_velocitymsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocitymsg(), target);
  }

  // optional .client.JumpMsg jumpMsg = 4;
  if (has_jumpmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->jumpmsg(), target);
  }

  // optional .client.InfoMsg infoMsg = 5;
  if (has_infomsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->infomsg(), target);
  }

  // optional .client.RequestMsg requestMsg = 6;
  if (has_requestmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->requestmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.MessageWrapper.MessageType messageType = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

    // optional .client.ThrustMsg thrustMsg = 2;
    if (has_thrustmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thrustmsg());
    }

    // optional .client.VelocityMsg velocityMsg = 3;
    if (has_velocitymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocitymsg());
    }

    // optional .client.JumpMsg jumpMsg = 4;
    if (has_jumpmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jumpmsg());
    }

    // optional .client.InfoMsg infoMsg = 5;
    if (has_infomsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infomsg());
    }

    // optional .client.RequestMsg requestMsg = 6;
    if (has_requestmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requestmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageWrapper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageWrapper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageWrapper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageWrapper::MergeFrom(const MessageWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_thrustmsg()) {
      mutable_thrustmsg()->::client::ThrustMsg::MergeFrom(from.thrustmsg());
    }
    if (from.has_velocitymsg()) {
      mutable_velocitymsg()->::client::VelocityMsg::MergeFrom(from.velocitymsg());
    }
    if (from.has_jumpmsg()) {
      mutable_jumpmsg()->::client::JumpMsg::MergeFrom(from.jumpmsg());
    }
    if (from.has_infomsg()) {
      mutable_infomsg()->::client::InfoMsg::MergeFrom(from.infomsg());
    }
    if (from.has_requestmsg()) {
      mutable_requestmsg()->::client::RequestMsg::MergeFrom(from.requestmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageWrapper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_thrustmsg()) {
    if (!this->thrustmsg().IsInitialized()) return false;
  }
  if (has_velocitymsg()) {
    if (!this->velocitymsg().IsInitialized()) return false;
  }
  if (has_jumpmsg()) {
    if (!this->jumpmsg().IsInitialized()) return false;
  }
  if (has_infomsg()) {
    if (!this->infomsg().IsInitialized()) return false;
  }
  if (has_requestmsg()) {
    if (!this->requestmsg().IsInitialized()) return false;
  }
  return true;
}

void MessageWrapper::Swap(MessageWrapper* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(thrustmsg_, other->thrustmsg_);
    std::swap(velocitymsg_, other->velocitymsg_);
    std::swap(jumpmsg_, other->jumpmsg_);
    std::swap(infomsg_, other->infomsg_);
    std::swap(requestmsg_, other->requestmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageWrapper_descriptor_;
  metadata.reflection = MessageWrapper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorMsg::kXFieldNumber;
const int VectorMsg::kYFieldNumber;
const int VectorMsg::kZFieldNumber;
#endif  // !_MSC_VER

VectorMsg::VectorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorMsg::InitAsDefaultInstance() {
}

VectorMsg::VectorMsg(const VectorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorMsg::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorMsg::~VectorMsg() {
  SharedDtor();
}

void VectorMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorMsg_descriptor_;
}

const VectorMsg& VectorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

VectorMsg* VectorMsg::default_instance_ = NULL;

VectorMsg* VectorMsg::New() const {
  return new VectorMsg;
}

void VectorMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorMsg::MergeFrom(const VectorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorMsg::CopyFrom(const VectorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VectorMsg::Swap(VectorMsg* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorMsg_descriptor_;
  metadata.reflection = VectorMsg_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ThrustMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int ThrustMsg::kNameFieldNumber;
const int ThrustMsg::kThrustFieldNumber;
#endif  // !_MSC_VER

ThrustMsg::ThrustMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThrustMsg::InitAsDefaultInstance() {
  thrust_ = const_cast< ::client::VectorMsg*>(&::client::VectorMsg::default_instance());
}

ThrustMsg::ThrustMsg(const ThrustMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThrustMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  thrust_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThrustMsg::~ThrustMsg() {
  SharedDtor();
}

void ThrustMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete thrust_;
  }
}

void ThrustMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThrustMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThrustMsg_descriptor_;
}

const ThrustMsg& ThrustMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

ThrustMsg* ThrustMsg::default_instance_ = NULL;

ThrustMsg* ThrustMsg::New() const {
  return new ThrustMsg;
}

void ThrustMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_thrust()) {
      if (thrust_ != NULL) thrust_->::client::VectorMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThrustMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "THRUST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_thrust;
        break;
      }

      // required .client.VectorMsg thrust = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thrust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thrust()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThrustMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "THRUST"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .client.VectorMsg thrust = 2;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->thrust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThrustMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "THRUST"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .client.VectorMsg thrust = 2;
  if (has_thrust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->thrust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThrustMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "THRUST"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .client.VectorMsg thrust = 2;
    if (has_thrust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thrust());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThrustMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThrustMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThrustMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThrustMsg::MergeFrom(const ThrustMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_thrust()) {
      mutable_thrust()->::client::VectorMsg::MergeFrom(from.thrust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThrustMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThrustMsg::CopyFrom(const ThrustMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrustMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_thrust()) {
    if (!this->thrust().IsInitialized()) return false;
  }
  return true;
}

void ThrustMsg::Swap(ThrustMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(thrust_, other->thrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThrustMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThrustMsg_descriptor_;
  metadata.reflection = ThrustMsg_reflection_;
  return metadata;
}


// ===================================================================

::std::string* VelocityMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int VelocityMsg::kNameFieldNumber;
const int VelocityMsg::kVelocityFieldNumber;
#endif  // !_MSC_VER

VelocityMsg::VelocityMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VelocityMsg::InitAsDefaultInstance() {
  velocity_ = const_cast< ::client::VectorMsg*>(&::client::VectorMsg::default_instance());
}

VelocityMsg::VelocityMsg(const VelocityMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VelocityMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VelocityMsg::~VelocityMsg() {
  SharedDtor();
}

void VelocityMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete velocity_;
  }
}

void VelocityMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VelocityMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VelocityMsg_descriptor_;
}

const VelocityMsg& VelocityMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

VelocityMsg* VelocityMsg::default_instance_ = NULL;

VelocityMsg* VelocityMsg::New() const {
  return new VelocityMsg;
}

void VelocityMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::client::VectorMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VelocityMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "VELOCITY"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }

      // required .client.VectorMsg velocity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VelocityMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "VELOCITY"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .client.VectorMsg velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VelocityMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "VELOCITY"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .client.VectorMsg velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VelocityMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "VELOCITY"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .client.VectorMsg velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VelocityMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VelocityMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VelocityMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VelocityMsg::MergeFrom(const VelocityMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::client::VectorMsg::MergeFrom(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VelocityMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityMsg::CopyFrom(const VelocityMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  return true;
}

void VelocityMsg::Swap(VelocityMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(velocity_, other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VelocityMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VelocityMsg_descriptor_;
  metadata.reflection = VelocityMsg_reflection_;
  return metadata;
}


// ===================================================================

::std::string* JumpMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int JumpMsg::kNameFieldNumber;
const int JumpMsg::kNewPositionFieldNumber;
#endif  // !_MSC_VER

JumpMsg::JumpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JumpMsg::InitAsDefaultInstance() {
  new_position_ = const_cast< ::client::VectorMsg*>(&::client::VectorMsg::default_instance());
}

JumpMsg::JumpMsg(const JumpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JumpMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  new_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JumpMsg::~JumpMsg() {
  SharedDtor();
}

void JumpMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete new_position_;
  }
}

void JumpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JumpMsg_descriptor_;
}

const JumpMsg& JumpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

JumpMsg* JumpMsg::default_instance_ = NULL;

JumpMsg* JumpMsg::New() const {
  return new JumpMsg;
}

void JumpMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_new_position()) {
      if (new_position_ != NULL) new_position_->::client::VectorMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JumpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "JUMP"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_position;
        break;
      }

      // required .client.VectorMsg new_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JumpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "JUMP"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .client.VectorMsg new_position = 2;
  if (has_new_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JumpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "JUMP"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .client.VectorMsg new_position = 2;
  if (has_new_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JumpMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "JUMP"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .client.VectorMsg new_position = 2;
    if (has_new_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JumpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JumpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JumpMsg::MergeFrom(const JumpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_new_position()) {
      mutable_new_position()->::client::VectorMsg::MergeFrom(from.new_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JumpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpMsg::CopyFrom(const JumpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_new_position()) {
    if (!this->new_position().IsInitialized()) return false;
  }
  return true;
}

void JumpMsg::Swap(JumpMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(new_position_, other->new_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JumpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JumpMsg_descriptor_;
  metadata.reflection = JumpMsg_reflection_;
  return metadata;
}


// ===================================================================

::std::string* InfoMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int InfoMsg::kNameFieldNumber;
const int InfoMsg::kInfoTypeFieldNumber;
const int InfoMsg::kDataFieldNumber;
#endif  // !_MSC_VER

InfoMsg::InfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfoMsg::InitAsDefaultInstance() {
}

InfoMsg::InfoMsg(const InfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfoMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  infotype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoMsg::~InfoMsg() {
  SharedDtor();
}

void InfoMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (infotype_ != &::google::protobuf::internal::kEmptyString) {
    delete infotype_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void InfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoMsg_descriptor_;
}

const InfoMsg& InfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

InfoMsg* InfoMsg::default_instance_ = NULL;

InfoMsg* InfoMsg::New() const {
  return new InfoMsg;
}

void InfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_infotype()) {
      if (infotype_ != &::google::protobuf::internal::kEmptyString) {
        infotype_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "INFO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infoType;
        break;
      }

      // required string infoType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infotype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->infotype().data(), this->infotype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "INFO"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string infoType = 2;
  if (has_infotype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infotype().data(), this->infotype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->infotype(), output);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "INFO"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string infoType = 2;
  if (has_infotype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infotype().data(), this->infotype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->infotype(), target);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "INFO"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string infoType = 2;
    if (has_infotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infotype());
    }

    // required string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoMsg::MergeFrom(const InfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoMsg::CopyFrom(const InfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void InfoMsg::Swap(InfoMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(infotype_, other->infotype_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoMsg_descriptor_;
  metadata.reflection = InfoMsg_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RequestMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int RequestMsg::kNameFieldNumber;
const int RequestMsg::kContinuousFieldNumber;
const int RequestMsg::kRequestTypeFieldNumber;
#endif  // !_MSC_VER

RequestMsg::RequestMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestMsg::InitAsDefaultInstance() {
}

RequestMsg::RequestMsg(const RequestMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  continuous_ = 0;
  requesttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMsg::~RequestMsg() {
  SharedDtor();
}

void RequestMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (requesttype_ != &::google::protobuf::internal::kEmptyString) {
    delete requesttype_;
  }
  if (this != default_instance_) {
  }
}

void RequestMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMsg_descriptor_;
}

const RequestMsg& RequestMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

RequestMsg* RequestMsg::default_instance_ = NULL;

RequestMsg* RequestMsg::New() const {
  return new RequestMsg;
}

void RequestMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    continuous_ = 0;
    if (has_requesttype()) {
      if (requesttype_ != &::google::protobuf::internal::kEmptyString) {
        requesttype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_continuous;
        break;
      }

      // required int32 continuous = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continuous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuous_)));
          set_has_continuous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_requestType;
        break;
      }

      // required string requestType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requesttype().data(), this->requesttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "REQUEST"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 continuous = 2;
  if (has_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->continuous(), output);
  }

  // required string requestType = 3;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requesttype().data(), this->requesttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->requesttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "REQUEST"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 continuous = 2;
  if (has_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->continuous(), target);
  }

  // required string requestType = 3;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requesttype().data(), this->requesttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->requesttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "REQUEST"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 continuous = 2;
    if (has_continuous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuous());
    }

    // required string requestType = 3;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMsg::MergeFrom(const RequestMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_continuous()) {
      set_continuous(from.continuous());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMsg::CopyFrom(const RequestMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void RequestMsg::Swap(RequestMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(continuous_, other->continuous_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMsg_descriptor_;
  metadata.reflection = RequestMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
