// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diana.proto

#ifndef PROTOBUF_diana_2eproto__INCLUDED
#define PROTOBUF_diana_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace diana {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_diana_2eproto();
void protobuf_AssignDesc_diana_2eproto();
void protobuf_ShutdownFile_diana_2eproto();

class MessageWrapper;
class Vector;
class helloMsg;
class physPropsMsg;

enum MessageWrapper_messageType {
  MessageWrapper_messageType_HELLO = 2,
  MessageWrapper_messageType_PHYSPROPS = 3
};
bool MessageWrapper_messageType_IsValid(int value);
const MessageWrapper_messageType MessageWrapper_messageType_messageType_MIN = MessageWrapper_messageType_HELLO;
const MessageWrapper_messageType MessageWrapper_messageType_messageType_MAX = MessageWrapper_messageType_PHYSPROPS;
const int MessageWrapper_messageType_messageType_ARRAYSIZE = MessageWrapper_messageType_messageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageWrapper_messageType_descriptor();
inline const ::std::string& MessageWrapper_messageType_Name(MessageWrapper_messageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageWrapper_messageType_descriptor(), value);
}
inline bool MessageWrapper_messageType_Parse(
    const ::std::string& name, MessageWrapper_messageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageWrapper_messageType>(
    MessageWrapper_messageType_descriptor(), name, value);
}
// ===================================================================

class MessageWrapper : public ::google::protobuf::Message {
 public:
  MessageWrapper();
  virtual ~MessageWrapper();

  MessageWrapper(const MessageWrapper& from);

  inline MessageWrapper& operator=(const MessageWrapper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageWrapper& default_instance();

  void Swap(MessageWrapper* other);

  // implements Message ----------------------------------------------

  MessageWrapper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageWrapper& from);
  void MergeFrom(const MessageWrapper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MessageWrapper_messageType messageType;
  static const messageType HELLO = MessageWrapper_messageType_HELLO;
  static const messageType PHYSPROPS = MessageWrapper_messageType_PHYSPROPS;
  static inline bool messageType_IsValid(int value) {
    return MessageWrapper_messageType_IsValid(value);
  }
  static const messageType messageType_MIN =
    MessageWrapper_messageType_messageType_MIN;
  static const messageType messageType_MAX =
    MessageWrapper_messageType_messageType_MAX;
  static const int messageType_ARRAYSIZE =
    MessageWrapper_messageType_messageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  messageType_descriptor() {
    return MessageWrapper_messageType_descriptor();
  }
  static inline const ::std::string& messageType_Name(messageType value) {
    return MessageWrapper_messageType_Name(value);
  }
  static inline bool messageType_Parse(const ::std::string& name,
      messageType* value) {
    return MessageWrapper_messageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .diana.MessageWrapper.messageType MessageType = 1;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  inline ::diana::MessageWrapper_messageType messagetype() const;
  inline void set_messagetype(::diana::MessageWrapper_messageType value);

  // optional .diana.helloMsg HelloMsg = 2;
  inline bool has_hellomsg() const;
  inline void clear_hellomsg();
  static const int kHelloMsgFieldNumber = 2;
  inline const ::diana::helloMsg& hellomsg() const;
  inline ::diana::helloMsg* mutable_hellomsg();
  inline ::diana::helloMsg* release_hellomsg();
  inline void set_allocated_hellomsg(::diana::helloMsg* hellomsg);

  // optional .diana.physPropsMsg PhysPropsMsg = 3;
  inline bool has_physpropsmsg() const;
  inline void clear_physpropsmsg();
  static const int kPhysPropsMsgFieldNumber = 3;
  inline const ::diana::physPropsMsg& physpropsmsg() const;
  inline ::diana::physPropsMsg* mutable_physpropsmsg();
  inline ::diana::physPropsMsg* release_physpropsmsg();
  inline void set_allocated_physpropsmsg(::diana::physPropsMsg* physpropsmsg);

  // @@protoc_insertion_point(class_scope:diana.MessageWrapper)
 private:
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_hellomsg();
  inline void clear_has_hellomsg();
  inline void set_has_physpropsmsg();
  inline void clear_has_physpropsmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::diana::helloMsg* hellomsg_;
  ::diana::physPropsMsg* physpropsmsg_;
  int messagetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_diana_2eproto();
  friend void protobuf_AssignDesc_diana_2eproto();
  friend void protobuf_ShutdownFile_diana_2eproto();

  void InitAsDefaultInstance();
  static MessageWrapper* default_instance_;
};
// -------------------------------------------------------------------

class Vector : public ::google::protobuf::Message {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector& default_instance();

  void Swap(Vector* other);

  // implements Message ----------------------------------------------

  Vector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:diana.Vector)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_diana_2eproto();
  friend void protobuf_AssignDesc_diana_2eproto();
  friend void protobuf_ShutdownFile_diana_2eproto();

  void InitAsDefaultInstance();
  static Vector* default_instance_;
};
// -------------------------------------------------------------------

class helloMsg : public ::google::protobuf::Message {
 public:
  helloMsg();
  virtual ~helloMsg();

  helloMsg(const helloMsg& from);

  inline helloMsg& operator=(const helloMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const helloMsg& default_instance();

  void Swap(helloMsg* other);

  // implements Message ----------------------------------------------

  helloMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const helloMsg& from);
  void MergeFrom(const helloMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "HELLO"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:diana.helloMsg)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  static ::std::string* _default_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_diana_2eproto();
  friend void protobuf_AssignDesc_diana_2eproto();
  friend void protobuf_ShutdownFile_diana_2eproto();

  void InitAsDefaultInstance();
  static helloMsg* default_instance_;
};
// -------------------------------------------------------------------

class physPropsMsg : public ::google::protobuf::Message {
 public:
  physPropsMsg();
  virtual ~physPropsMsg();

  physPropsMsg(const physPropsMsg& from);

  inline physPropsMsg& operator=(const physPropsMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const physPropsMsg& default_instance();

  void Swap(physPropsMsg* other);

  // implements Message ----------------------------------------------

  physPropsMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const physPropsMsg& from);
  void MergeFrom(const physPropsMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "PHYSPROPS"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double mass = 2;
  inline bool has_mass() const;
  inline void clear_mass();
  static const int kMassFieldNumber = 2;
  inline double mass() const;
  inline void set_mass(double value);

  // required .diana.Vector position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::diana::Vector& position() const;
  inline ::diana::Vector* mutable_position();
  inline ::diana::Vector* release_position();
  inline void set_allocated_position(::diana::Vector* position);

  // required .diana.Vector velocity = 4;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  inline const ::diana::Vector& velocity() const;
  inline ::diana::Vector* mutable_velocity();
  inline ::diana::Vector* release_velocity();
  inline void set_allocated_velocity(::diana::Vector* velocity);

  // required .diana.Vector orientation = 5;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 5;
  inline const ::diana::Vector& orientation() const;
  inline ::diana::Vector* mutable_orientation();
  inline ::diana::Vector* release_orientation();
  inline void set_allocated_orientation(::diana::Vector* orientation);

  // required .diana.Vector thrust = 6;
  inline bool has_thrust() const;
  inline void clear_thrust();
  static const int kThrustFieldNumber = 6;
  inline const ::diana::Vector& thrust() const;
  inline ::diana::Vector* mutable_thrust();
  inline ::diana::Vector* release_thrust();
  inline void set_allocated_thrust(::diana::Vector* thrust);

  // required double radius = 7;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 7;
  inline double radius() const;
  inline void set_radius(double value);

  // @@protoc_insertion_point(class_scope:diana.physPropsMsg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mass();
  inline void clear_has_mass();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_thrust();
  inline void clear_has_thrust();
  inline void set_has_radius();
  inline void clear_has_radius();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  static ::std::string* _default_name_;
  double mass_;
  ::diana::Vector* position_;
  ::diana::Vector* velocity_;
  ::diana::Vector* orientation_;
  ::diana::Vector* thrust_;
  double radius_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_diana_2eproto();
  friend void protobuf_AssignDesc_diana_2eproto();
  friend void protobuf_ShutdownFile_diana_2eproto();

  void InitAsDefaultInstance();
  static physPropsMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageWrapper

// required .diana.MessageWrapper.messageType MessageType = 1;
inline bool MessageWrapper::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageWrapper::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageWrapper::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageWrapper::clear_messagetype() {
  messagetype_ = 2;
  clear_has_messagetype();
}
inline ::diana::MessageWrapper_messageType MessageWrapper::messagetype() const {
  return static_cast< ::diana::MessageWrapper_messageType >(messagetype_);
}
inline void MessageWrapper::set_messagetype(::diana::MessageWrapper_messageType value) {
  assert(::diana::MessageWrapper_messageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
}

// optional .diana.helloMsg HelloMsg = 2;
inline bool MessageWrapper::has_hellomsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageWrapper::set_has_hellomsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageWrapper::clear_has_hellomsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageWrapper::clear_hellomsg() {
  if (hellomsg_ != NULL) hellomsg_->::diana::helloMsg::Clear();
  clear_has_hellomsg();
}
inline const ::diana::helloMsg& MessageWrapper::hellomsg() const {
  return hellomsg_ != NULL ? *hellomsg_ : *default_instance_->hellomsg_;
}
inline ::diana::helloMsg* MessageWrapper::mutable_hellomsg() {
  set_has_hellomsg();
  if (hellomsg_ == NULL) hellomsg_ = new ::diana::helloMsg;
  return hellomsg_;
}
inline ::diana::helloMsg* MessageWrapper::release_hellomsg() {
  clear_has_hellomsg();
  ::diana::helloMsg* temp = hellomsg_;
  hellomsg_ = NULL;
  return temp;
}
inline void MessageWrapper::set_allocated_hellomsg(::diana::helloMsg* hellomsg) {
  delete hellomsg_;
  hellomsg_ = hellomsg;
  if (hellomsg) {
    set_has_hellomsg();
  } else {
    clear_has_hellomsg();
  }
}

// optional .diana.physPropsMsg PhysPropsMsg = 3;
inline bool MessageWrapper::has_physpropsmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageWrapper::set_has_physpropsmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageWrapper::clear_has_physpropsmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageWrapper::clear_physpropsmsg() {
  if (physpropsmsg_ != NULL) physpropsmsg_->::diana::physPropsMsg::Clear();
  clear_has_physpropsmsg();
}
inline const ::diana::physPropsMsg& MessageWrapper::physpropsmsg() const {
  return physpropsmsg_ != NULL ? *physpropsmsg_ : *default_instance_->physpropsmsg_;
}
inline ::diana::physPropsMsg* MessageWrapper::mutable_physpropsmsg() {
  set_has_physpropsmsg();
  if (physpropsmsg_ == NULL) physpropsmsg_ = new ::diana::physPropsMsg;
  return physpropsmsg_;
}
inline ::diana::physPropsMsg* MessageWrapper::release_physpropsmsg() {
  clear_has_physpropsmsg();
  ::diana::physPropsMsg* temp = physpropsmsg_;
  physpropsmsg_ = NULL;
  return temp;
}
inline void MessageWrapper::set_allocated_physpropsmsg(::diana::physPropsMsg* physpropsmsg) {
  delete physpropsmsg_;
  physpropsmsg_ = physpropsmsg;
  if (physpropsmsg) {
    set_has_physpropsmsg();
  } else {
    clear_has_physpropsmsg();
  }
}

// -------------------------------------------------------------------

// Vector

// required double x = 1;
inline bool Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector::x() const {
  return x_;
}
inline void Vector::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector::y() const {
  return y_;
}
inline void Vector::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double z = 3;
inline bool Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector::z() const {
  return z_;
}
inline void Vector::set_z(double value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// helloMsg

// optional string name = 1 [default = "HELLO"];
inline bool helloMsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void helloMsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void helloMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void helloMsg::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& helloMsg::name() const {
  return *name_;
}
inline void helloMsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void helloMsg::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void helloMsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* helloMsg::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  return name_;
}
inline ::std::string* helloMsg::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void helloMsg::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
}

// -------------------------------------------------------------------

// physPropsMsg

// optional string name = 1 [default = "PHYSPROPS"];
inline bool physPropsMsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void physPropsMsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void physPropsMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void physPropsMsg::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& physPropsMsg::name() const {
  return *name_;
}
inline void physPropsMsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void physPropsMsg::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void physPropsMsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* physPropsMsg::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  return name_;
}
inline ::std::string* physPropsMsg::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void physPropsMsg::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
}

// required double mass = 2;
inline bool physPropsMsg::has_mass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void physPropsMsg::set_has_mass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void physPropsMsg::clear_has_mass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void physPropsMsg::clear_mass() {
  mass_ = 0;
  clear_has_mass();
}
inline double physPropsMsg::mass() const {
  return mass_;
}
inline void physPropsMsg::set_mass(double value) {
  set_has_mass();
  mass_ = value;
}

// required .diana.Vector position = 3;
inline bool physPropsMsg::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void physPropsMsg::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void physPropsMsg::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void physPropsMsg::clear_position() {
  if (position_ != NULL) position_->::diana::Vector::Clear();
  clear_has_position();
}
inline const ::diana::Vector& physPropsMsg::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::diana::Vector* physPropsMsg::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::diana::Vector;
  return position_;
}
inline ::diana::Vector* physPropsMsg::release_position() {
  clear_has_position();
  ::diana::Vector* temp = position_;
  position_ = NULL;
  return temp;
}
inline void physPropsMsg::set_allocated_position(::diana::Vector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// required .diana.Vector velocity = 4;
inline bool physPropsMsg::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void physPropsMsg::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void physPropsMsg::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void physPropsMsg::clear_velocity() {
  if (velocity_ != NULL) velocity_->::diana::Vector::Clear();
  clear_has_velocity();
}
inline const ::diana::Vector& physPropsMsg::velocity() const {
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::diana::Vector* physPropsMsg::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::diana::Vector;
  return velocity_;
}
inline ::diana::Vector* physPropsMsg::release_velocity() {
  clear_has_velocity();
  ::diana::Vector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void physPropsMsg::set_allocated_velocity(::diana::Vector* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
}

// required .diana.Vector orientation = 5;
inline bool physPropsMsg::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void physPropsMsg::set_has_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void physPropsMsg::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void physPropsMsg::clear_orientation() {
  if (orientation_ != NULL) orientation_->::diana::Vector::Clear();
  clear_has_orientation();
}
inline const ::diana::Vector& physPropsMsg::orientation() const {
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::diana::Vector* physPropsMsg::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) orientation_ = new ::diana::Vector;
  return orientation_;
}
inline ::diana::Vector* physPropsMsg::release_orientation() {
  clear_has_orientation();
  ::diana::Vector* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void physPropsMsg::set_allocated_orientation(::diana::Vector* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
}

// required .diana.Vector thrust = 6;
inline bool physPropsMsg::has_thrust() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void physPropsMsg::set_has_thrust() {
  _has_bits_[0] |= 0x00000020u;
}
inline void physPropsMsg::clear_has_thrust() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void physPropsMsg::clear_thrust() {
  if (thrust_ != NULL) thrust_->::diana::Vector::Clear();
  clear_has_thrust();
}
inline const ::diana::Vector& physPropsMsg::thrust() const {
  return thrust_ != NULL ? *thrust_ : *default_instance_->thrust_;
}
inline ::diana::Vector* physPropsMsg::mutable_thrust() {
  set_has_thrust();
  if (thrust_ == NULL) thrust_ = new ::diana::Vector;
  return thrust_;
}
inline ::diana::Vector* physPropsMsg::release_thrust() {
  clear_has_thrust();
  ::diana::Vector* temp = thrust_;
  thrust_ = NULL;
  return temp;
}
inline void physPropsMsg::set_allocated_thrust(::diana::Vector* thrust) {
  delete thrust_;
  thrust_ = thrust;
  if (thrust) {
    set_has_thrust();
  } else {
    clear_has_thrust();
  }
}

// required double radius = 7;
inline bool physPropsMsg::has_radius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void physPropsMsg::set_has_radius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void physPropsMsg::clear_has_radius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void physPropsMsg::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double physPropsMsg::radius() const {
  return radius_;
}
inline void physPropsMsg::set_radius(double value) {
  set_has_radius();
  radius_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace diana

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::diana::MessageWrapper_messageType>() {
  return ::diana::MessageWrapper_messageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_diana_2eproto__INCLUDED
