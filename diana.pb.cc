// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diana.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "diana.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace diana {

namespace {

const ::google::protobuf::Descriptor* MessageWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageWrapper_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageWrapper_messageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* helloMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  helloMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* physPropsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  physPropsMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_diana_2eproto() {
  protobuf_AddDesc_diana_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "diana.proto");
  GOOGLE_CHECK(file != NULL);
  MessageWrapper_descriptor_ = file->message_type(0);
  static const int MessageWrapper_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, hellomsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, physpropsmsg_),
  };
  MessageWrapper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageWrapper_descriptor_,
      MessageWrapper::default_instance_,
      MessageWrapper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageWrapper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageWrapper));
  MessageWrapper_messageType_descriptor_ = MessageWrapper_descriptor_->enum_type(0);
  Vector_descriptor_ = file->message_type(1);
  static const int Vector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, z_),
  };
  Vector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector_descriptor_,
      Vector::default_instance_,
      Vector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector));
  helloMsg_descriptor_ = file->message_type(2);
  static const int helloMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helloMsg, name_),
  };
  helloMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      helloMsg_descriptor_,
      helloMsg::default_instance_,
      helloMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helloMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(helloMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(helloMsg));
  physPropsMsg_descriptor_ = file->message_type(3);
  static const int physPropsMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, thrust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, radius_),
  };
  physPropsMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      physPropsMsg_descriptor_,
      physPropsMsg::default_instance_,
      physPropsMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(physPropsMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(physPropsMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_diana_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageWrapper_descriptor_, &MessageWrapper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector_descriptor_, &Vector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    helloMsg_descriptor_, &helloMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    physPropsMsg_descriptor_, &physPropsMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_diana_2eproto() {
  delete MessageWrapper::default_instance_;
  delete MessageWrapper_reflection_;
  delete Vector::default_instance_;
  delete Vector_reflection_;
  delete helloMsg::default_instance_;
  delete helloMsg_reflection_;
  delete helloMsg::_default_name_;
  delete physPropsMsg::default_instance_;
  delete physPropsMsg_reflection_;
  delete physPropsMsg::_default_name_;
}

void protobuf_AddDesc_diana_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013diana.proto\022\005diana\"\277\001\n\016MessageWrapper\022"
    "6\n\013MessageType\030\001 \002(\0162!.diana.MessageWrap"
    "per.messageType\022!\n\010HelloMsg\030\002 \001(\0132\017.dian"
    "a.helloMsg\022)\n\014PhysPropsMsg\030\003 \001(\0132\023.diana"
    ".physPropsMsg\"\'\n\013messageType\022\t\n\005HELLO\020\002\022"
    "\r\n\tPHYSPROPS\020\003\")\n\006Vector\022\t\n\001x\030\001 \002(\001\022\t\n\001y"
    "\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"\037\n\010helloMsg\022\023\n\004name\030\001 "
    "\001(\t:\005HELLO\"\312\001\n\014physPropsMsg\022\027\n\004name\030\001 \001("
    "\t:\tPHYSPROPS\022\014\n\004mass\030\002 \002(\001\022\037\n\010position\030\003"
    " \002(\0132\r.diana.Vector\022\037\n\010velocity\030\004 \002(\0132\r."
    "diana.Vector\022\"\n\013orientation\030\005 \002(\0132\r.dian"
    "a.Vector\022\035\n\006thrust\030\006 \002(\0132\r.diana.Vector\022"
    "\016\n\006radius\030\007 \002(\001", 495);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diana.proto", &protobuf_RegisterTypes);
  MessageWrapper::default_instance_ = new MessageWrapper();
  Vector::default_instance_ = new Vector();
  helloMsg::_default_name_ =
      new ::std::string("HELLO", 5);
  helloMsg::default_instance_ = new helloMsg();
  physPropsMsg::_default_name_ =
      new ::std::string("PHYSPROPS", 9);
  physPropsMsg::default_instance_ = new physPropsMsg();
  MessageWrapper::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  helloMsg::default_instance_->InitAsDefaultInstance();
  physPropsMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_diana_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_diana_2eproto {
  StaticDescriptorInitializer_diana_2eproto() {
    protobuf_AddDesc_diana_2eproto();
  }
} static_descriptor_initializer_diana_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageWrapper_messageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageWrapper_messageType_descriptor_;
}
bool MessageWrapper_messageType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageWrapper_messageType MessageWrapper::HELLO;
const MessageWrapper_messageType MessageWrapper::PHYSPROPS;
const MessageWrapper_messageType MessageWrapper::messageType_MIN;
const MessageWrapper_messageType MessageWrapper::messageType_MAX;
const int MessageWrapper::messageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageWrapper::kMessageTypeFieldNumber;
const int MessageWrapper::kHelloMsgFieldNumber;
const int MessageWrapper::kPhysPropsMsgFieldNumber;
#endif  // !_MSC_VER

MessageWrapper::MessageWrapper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageWrapper::InitAsDefaultInstance() {
  hellomsg_ = const_cast< ::diana::helloMsg*>(&::diana::helloMsg::default_instance());
  physpropsmsg_ = const_cast< ::diana::physPropsMsg*>(&::diana::physPropsMsg::default_instance());
}

MessageWrapper::MessageWrapper(const MessageWrapper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageWrapper::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 2;
  hellomsg_ = NULL;
  physpropsmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageWrapper::~MessageWrapper() {
  SharedDtor();
}

void MessageWrapper::SharedDtor() {
  if (this != default_instance_) {
    delete hellomsg_;
    delete physpropsmsg_;
  }
}

void MessageWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageWrapper_descriptor_;
}

const MessageWrapper& MessageWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diana_2eproto();
  return *default_instance_;
}

MessageWrapper* MessageWrapper::default_instance_ = NULL;

MessageWrapper* MessageWrapper::New() const {
  return new MessageWrapper;
}

void MessageWrapper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 2;
    if (has_hellomsg()) {
      if (hellomsg_ != NULL) hellomsg_->::diana::helloMsg::Clear();
    }
    if (has_physpropsmsg()) {
      if (physpropsmsg_ != NULL) physpropsmsg_->::diana::physPropsMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .diana.MessageWrapper.messageType MessageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::diana::MessageWrapper_messageType_IsValid(value)) {
            set_messagetype(static_cast< ::diana::MessageWrapper_messageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HelloMsg;
        break;
      }

      // optional .diana.helloMsg HelloMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HelloMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hellomsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PhysPropsMsg;
        break;
      }

      // optional .diana.physPropsMsg PhysPropsMsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PhysPropsMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physpropsmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .diana.MessageWrapper.messageType MessageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .diana.helloMsg HelloMsg = 2;
  if (has_hellomsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hellomsg(), output);
  }

  // optional .diana.physPropsMsg PhysPropsMsg = 3;
  if (has_physpropsmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->physpropsmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageWrapper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .diana.MessageWrapper.messageType MessageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // optional .diana.helloMsg HelloMsg = 2;
  if (has_hellomsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hellomsg(), target);
  }

  // optional .diana.physPropsMsg PhysPropsMsg = 3;
  if (has_physpropsmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->physpropsmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .diana.MessageWrapper.messageType MessageType = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

    // optional .diana.helloMsg HelloMsg = 2;
    if (has_hellomsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hellomsg());
    }

    // optional .diana.physPropsMsg PhysPropsMsg = 3;
    if (has_physpropsmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physpropsmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageWrapper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageWrapper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageWrapper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageWrapper::MergeFrom(const MessageWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_hellomsg()) {
      mutable_hellomsg()->::diana::helloMsg::MergeFrom(from.hellomsg());
    }
    if (from.has_physpropsmsg()) {
      mutable_physpropsmsg()->::diana::physPropsMsg::MergeFrom(from.physpropsmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageWrapper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_physpropsmsg()) {
    if (!this->physpropsmsg().IsInitialized()) return false;
  }
  return true;
}

void MessageWrapper::Swap(MessageWrapper* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(hellomsg_, other->hellomsg_);
    std::swap(physpropsmsg_, other->physpropsmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageWrapper_descriptor_;
  metadata.reflection = MessageWrapper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  SharedDtor();
}

void Vector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_descriptor_;
}

const Vector& Vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diana_2eproto();
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_descriptor_;
  metadata.reflection = Vector_reflection_;
  return metadata;
}


// ===================================================================

::std::string* helloMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int helloMsg::kNameFieldNumber;
#endif  // !_MSC_VER

helloMsg::helloMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void helloMsg::InitAsDefaultInstance() {
}

helloMsg::helloMsg(const helloMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void helloMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

helloMsg::~helloMsg() {
  SharedDtor();
}

void helloMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void helloMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* helloMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return helloMsg_descriptor_;
}

const helloMsg& helloMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diana_2eproto();
  return *default_instance_;
}

helloMsg* helloMsg::default_instance_ = NULL;

helloMsg* helloMsg::New() const {
  return new helloMsg;
}

void helloMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool helloMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "HELLO"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void helloMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "HELLO"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* helloMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "HELLO"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int helloMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "HELLO"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void helloMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const helloMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const helloMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void helloMsg::MergeFrom(const helloMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void helloMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void helloMsg::CopyFrom(const helloMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool helloMsg::IsInitialized() const {

  return true;
}

void helloMsg::Swap(helloMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata helloMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = helloMsg_descriptor_;
  metadata.reflection = helloMsg_reflection_;
  return metadata;
}


// ===================================================================

::std::string* physPropsMsg::_default_name_ = NULL;
#ifndef _MSC_VER
const int physPropsMsg::kNameFieldNumber;
const int physPropsMsg::kMassFieldNumber;
const int physPropsMsg::kPositionFieldNumber;
const int physPropsMsg::kVelocityFieldNumber;
const int physPropsMsg::kOrientationFieldNumber;
const int physPropsMsg::kThrustFieldNumber;
const int physPropsMsg::kRadiusFieldNumber;
#endif  // !_MSC_VER

physPropsMsg::physPropsMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void physPropsMsg::InitAsDefaultInstance() {
  position_ = const_cast< ::diana::Vector*>(&::diana::Vector::default_instance());
  velocity_ = const_cast< ::diana::Vector*>(&::diana::Vector::default_instance());
  orientation_ = const_cast< ::diana::Vector*>(&::diana::Vector::default_instance());
  thrust_ = const_cast< ::diana::Vector*>(&::diana::Vector::default_instance());
}

physPropsMsg::physPropsMsg(const physPropsMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void physPropsMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  mass_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  orientation_ = NULL;
  thrust_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

physPropsMsg::~physPropsMsg() {
  SharedDtor();
}

void physPropsMsg::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
    delete orientation_;
    delete thrust_;
  }
}

void physPropsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* physPropsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return physPropsMsg_descriptor_;
}

const physPropsMsg& physPropsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_diana_2eproto();
  return *default_instance_;
}

physPropsMsg* physPropsMsg::default_instance_ = NULL;

physPropsMsg* physPropsMsg::New() const {
  return new physPropsMsg;
}

void physPropsMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    mass_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::diana::Vector::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::diana::Vector::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::diana::Vector::Clear();
    }
    if (has_thrust()) {
      if (thrust_ != NULL) thrust_->::diana::Vector::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool physPropsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "PHYSPROPS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mass;
        break;
      }

      // required double mass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .diana.Vector position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // required .diana.Vector velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_orientation;
        break;
      }

      // required .diana.Vector orientation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_thrust;
        break;
      }

      // required .diana.Vector thrust = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thrust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thrust()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_radius;
        break;
      }

      // required double radius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void physPropsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "PHYSPROPS"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double mass = 2;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mass(), output);
  }

  // required .diana.Vector position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required .diana.Vector velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->velocity(), output);
  }

  // required .diana.Vector orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->orientation(), output);
  }

  // required .diana.Vector thrust = 6;
  if (has_thrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->thrust(), output);
  }

  // required double radius = 7;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* physPropsMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "PHYSPROPS"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double mass = 2;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mass(), target);
  }

  // required .diana.Vector position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required .diana.Vector velocity = 4;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->velocity(), target);
  }

  // required .diana.Vector orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->orientation(), target);
  }

  // required .diana.Vector thrust = 6;
  if (has_thrust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->thrust(), target);
  }

  // required double radius = 7;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int physPropsMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "PHYSPROPS"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double mass = 2;
    if (has_mass()) {
      total_size += 1 + 8;
    }

    // required .diana.Vector position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .diana.Vector velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required .diana.Vector orientation = 5;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation());
    }

    // required .diana.Vector thrust = 6;
    if (has_thrust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thrust());
    }

    // required double radius = 7;
    if (has_radius()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void physPropsMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const physPropsMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const physPropsMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void physPropsMsg::MergeFrom(const physPropsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_position()) {
      mutable_position()->::diana::Vector::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::diana::Vector::MergeFrom(from.velocity());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::diana::Vector::MergeFrom(from.orientation());
    }
    if (from.has_thrust()) {
      mutable_thrust()->::diana::Vector::MergeFrom(from.thrust());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void physPropsMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void physPropsMsg::CopyFrom(const physPropsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool physPropsMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation().IsInitialized()) return false;
  }
  if (has_thrust()) {
    if (!this->thrust().IsInitialized()) return false;
  }
  return true;
}

void physPropsMsg::Swap(physPropsMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mass_, other->mass_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(orientation_, other->orientation_);
    std::swap(thrust_, other->thrust_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata physPropsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = physPropsMsg_descriptor_;
  metadata.reflection = physPropsMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace diana

// @@protoc_insertion_point(global_scope)
